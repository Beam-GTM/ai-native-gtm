Analyze all core learnings for nexus to enable new users.

Mujtaba / Dorian 1:1 - August 29
VIEW RECORDING - 36 mins (No highlights): https://fathom.video/share/DJCMNFkitK2i8Av41xirFjWwuBrupeFt

---

0:02 - Dorian Schlede (beam.ai)
  But you see now, look, it has now created an agent. It looks somewhat similar, but it's not a complete agent.  So it's not only 100 lines, but the actual agent is like 800 lines. So if you do this kind of thing where you let it generate too many different things, it will only generate you 100 lines of something that looks correct, but it's not actually correct.  So you cannot implement three agents in one chat. You need to have a single chat where you plan to implement an agent as a feature, and then you do another chat where you implement it.  And this is the only way that it will work. So now it has created way too much random stuff.  I would actually reset the main chat here to a previous state to remove all this stuff that you don't actually want.  So yeah, it... it... It's not super easy to use because, yeah, you need to make sure it doesn't break.  But, you know, if you didn't have the system, then it would also just break. Can you do it here, like Restore Checkpoint?  Yes.

1:15 - Mujtaba Ahmed (beam.ai)
  This is after it started doing all of that. Because here, like, I just did the structure.

1:21 - Dorian Schlede (beam.ai)
  Did it act in the UltraThink analysis also already? Can you scroll up a bit more just to see what it did here?  Did it just think or did it do anything?

1:29 - Mujtaba Ahmed (beam.ai)
  I think it just did some thinking here at this point in time. Yeah. I'm not, I don't think it implemented anything, you see.  So, it came, what they actually tested. Yeah, it's just reading.

1:45 - Dorian Schlede (beam.ai)
  Okay.

1:45 - Mujtaba Ahmed (beam.ai)
  Reading through everything. So, I don't think it did anything. just, I did it. Okay. Okay.

1:50 - Dorian Schlede (beam.ai)
  But then we can also potentially continue here. So, um.

1:56 - Mujtaba Ahmed (beam.ai)
  Oh, yeah. Huh? You mean we can continue. From here or from the other thing?

2:01 - Dorian Schlede (beam.ai)
  No, now I think we can continue from here. So it's just important that you separate planning and implementation. So now here you can also tell it.  Okay, now, yeah, restore it. Yeah, now all your Pursus files will be gone. Not so, Pursus, because they're not very accurate right now.

2:27 - Mujtaba Ahmed (beam.ai)
  That's the problem. No.

2:31 - Dorian Schlede (beam.ai)
  Okay, so now let's change the focus. Hmm, I'm not sure why I didn't delete it. It should have. But let's see.  So now what I would recommend you do is there is a plan feature flow. You can just call it by saying run feature.  Run or run plan feature or plan feature, whatever. So if you use the add sign, just search for plan feature.  Okay. So you application You Perfect. So now we'll go into planning mode. Now the question is what you wanted to plan.  So it shouldn't plan a single feature, right? It should maybe plan multiple features. So maybe you want to ask it.  Okay, let's see what it does. Yes, and Yes, This is now where it gets much better. Because now, instead of implementing, it's really thinking about it.  Did it actually, yeah, it did read the plan feature flow. Yeah, okay, but did you get the general gist of it, Mujtaba?  The splitting the concerns in each chat, essentially.

4:36 - Mujtaba Ahmed (beam.ai)
  Yeah, yeah.

4:37 - Dorian Schlede (beam.ai)
  And making it, slicing it up into manageable pieces for the AI.

4:42 - Mujtaba Ahmed (beam.ai)
  Yes. So here, if I'm doing like a plan feature, so like right now, will it... Okay, okay. Let's see where it adds the files.

4:54 - Dorian Schlede (beam.ai)
  You can just click on the file. Let's see where it added it. This one? Yeah, for example.

5:01 - Mujtaba Ahmed (beam.ai)
  It's running away from you. Yeah. In it here, the features. Perfect. So there you go.

5:10 - Dorian Schlede (beam.ai)
  It's the right place. So now it's planning the feature implementation.

5:16 - Mujtaba Ahmed (beam.ai)
  And then I close the chat and start it in a different one, right? The way I think. Yes. And that's important.

5:22 - Dorian Schlede (beam.ai)
  Don't just close it. You need to say close chat, right? So that's the close chat command. That will store everything you did in the project memory.  So that's important, right? So the next chat, you know what you've done in the last chat. Yeah. Hmm. Mm-hmm.  Hmm. Hmm. Okay, and then how this will go, Muj, is you can design, I mean, at the beginning, maybe just one, but later on, you can design once you've got the flow.  You can design two or three features at the same time, and then you can also implement two or three features at the same time.  Only make sure that they're not dependent on each other. Yeah, that's important. But, for example, you can design one task to get you data, and then you can also design another task to do something else, right?  You do it in two chats, build it at the same time.

6:43 - Mujtaba Ahmed (beam.ai)
  Another question I had is, what's the difference between the features that are being populated here versus the agents that live here?

6:49 - Dorian Schlede (beam.ai)
  Yeah, so agents are like a persona. So, why? Is there no Agents, by the way?

7:03 - Mujtaba Ahmed (beam.ai)
  Can you open the Agents folder again?

7:06 - Dorian Schlede (beam.ai)
  Ah, sorry. I was confused. There is Agents. It's the same thing that we had in, like, this Beams Docs, right?

7:12 - Mujtaba Ahmed (beam.ai)
  Yeah. All good.

7:15 - Dorian Schlede (beam.ai)
  So an agent contains a high-level definition of what it's doing.

7:24 - Mujtaba Ahmed (beam.ai)
  What? Oh, yeah, okay. So agent and features are grouped together in a way that the agent is a blueprint or, like, a high-level, sort of, like, a scope of what needs to be done, and then a feature is something that takes the context from it and then goes ahead and does it, correct?

7:41 - Dorian Schlede (beam.ai)
  So, okay, no, so I need this visual hierarchy. So the agent is at the top. You use agents. So I actually only use the orchestrator at the moment.  I don't use other agents because it's enough. Now, what the agent executes is workflows. Right? So it executes workflows with automate tasks.  And when it's executing the workflows, I have a plan feature workflow. Right? And that will develop a feature. And then I have another workflow for my agent, which is implement feature.  So and then it will implement the feature. The feature is a self-contained context box for one topic that is temporary.  So it's like a temporary context storage that you use to work on it over multiple chats. And after your feature is done, it will be implemented as a task, as a workflow, or as an agent.  So a feature is your implementation. And so your implementation context, essentially. So your agent, you will use to talk to, it will use workflows workflows and tasks, and it uses them to build features.  use privacy and

9:04 - Mujtaba Ahmed (beam.ai)
  Got it.

9:10 - Dorian Schlede (beam.ai)
  Cool. So now it's done.

9:12 - Mujtaba Ahmed (beam.ai)
  Now you can close the chat. It's given me some, the feature system blocking. This feature system blocking, the Beam Academy documentation is completely non-functional until these path references are fixed.  All five regions will fail on activation due to broken dependency paths. Ready to fix the critical path resolution issue and make your Academy system functional.  Yes.

9:36 - Dorian Schlede (beam.ai)
  Now you say close chat. Now we can open the next chat. Now you can run the orchestrator. Yes. By the way, I always preload some orchestrator.  Sometimes I preload an orchestrator already because I know I want to get started in a minute. So my terminal terminal literature.  It looked like this. So I literally use three to six terminals at the same time. Crazy, man.

10:07 - Mujtaba Ahmed (beam.ai)
  So I'm always switching.

10:09 - Dorian Schlede (beam.ai)
  I also have two side by side. So I see two chats at the same time. It's like only vibe coding all day, nothing else anymore.  It's crazy.

10:22 - Mujtaba Ahmed (beam.ai)
  Yeah, calls have changed so much, you know, like I was thinking about it as well. So we're really talking about the platform right now, you know.  We're mostly like trying to think of like things that we can optimize using live coding, you know.

10:36 - Dorian Schlede (beam.ai)
  Yeah. It's crazy.

10:37 - Mujtaba Ahmed (beam.ai)
  Like it's a very transitional switch. So like it's a bit, it's a bit different. It feels a bit different, you know.

10:43 - Dorian Schlede (beam.ai)
  It also is very different as you see what you are doing right now.

10:49 - Mujtaba Ahmed (beam.ai)
  Should we keep all of this? think so, right? This is the... Where are we right now? I'm in chat room.  this?

10:58 - Dorian Schlede (beam.ai)
  What are you looking at even right now? now? So this is one of the features that we added here.

11:04 - Mujtaba Ahmed (beam.ai)
  documents. Okay. I see.

11:06 - Dorian Schlede (beam.ai)
  So that's where the UltraThink results, essentially. We had deeply thought about the impact of this feature and what it does and so on.

11:14 - Mujtaba Ahmed (beam.ai)
  Perfect.

11:15 - Dorian Schlede (beam.ai)
  Yeah, always keep them. Yes. I think, yeah, let's review and save all of them, maybe. I need to make sure.

11:34 - Mujtaba Ahmed (beam.ai)
  Oh, wow.

11:35 - Dorian Schlede (beam.ai)
  The orchestrator is so deprecated. Wait, do we have two orchestrators? Can you go to the chat again and start putting, stay in the same chat, just open the chat window and type orchestrator again just to see.  We have two because maybe you activated an old one. Aha.

11:57 - Mujtaba Ahmed (beam.ai)
  Aha. Aha.

11:57 - Dorian Schlede (beam.ai)
  I think you activated the Claude orchestrator. don't I Okay. You just delete the Cloud Orchestrator because you don't need it at the moment.  So at the top left, there is the Cloud folder. Just remove all the agents for now. Yeah, I will reintroduce all these agents later on, but now it's kind of confusing it.  Cool. So you need to rerun this chat because it loaded an old orchestrator. Now you should only have one.

12:24 - Mujtaba Ahmed (beam.ai)
  Yeah, think you've used the orchestrator so much that you could just see that it's coming up with some random .

12:31 - Dorian Schlede (beam.ai)
  Yeah, I saw it by the files that it has loaded because it loaded a project brief with a date.  And now my project brief doesn't have a date anymore. It's always just project brief and it gets auto updated.  So that's how I saw it. Yeah, so in the meantime, you can kind of review what it generated in the feature, right?  It might be interesting just to, you know, try to get a grasp of what's going on.

13:02 - Mujtaba Ahmed (beam.ai)
  So we have a Beam Academy Context Management, but there's nothing here. And then we have a Beam Docs Path Resolution Fix.  This is what it created.

13:13 - Dorian Schlede (beam.ai)
  Let's look at the feature definition maybe. I think the elicitation insights, yeah. Let's look at maybe at the feature definition.  The second file, yeah. Oh wow, that's very dedicated. I guess it's clear. Okay, cool. But anyway, so now I guess we can continue.  Yeah, just save all this to make sure that the next guy has it. Right. Now, you see it has loaded the chat.  La la la. You need to hear, make sure that it loads all. Files, I make sure that this always works.  Now in this, in the new version, also 95% always works. So that looks good. So that's your activation sequence.  Let's scroll down. There's Smart Tips. So it even suggests to you what you should do next.

14:26 - Mujtaba Ahmed (beam.ai)
  I mean, it's given me like five options. Where is it given the suggestion again? At the bottom, Smart Tips.

14:32 - Dorian Schlede (beam.ai)
  There is your project context. I see you're working on systematic process development for your multi-agent automation system. I can help you build blah, blah, blah, blah.  Okay, but we want to now implement the feature. So now you can say add implement feature. Make sure you don't pick the cloud one.  That was again two, why was that two? Can you? So one is in framework and the other one is in  Workspace? So it needs to be in the framework one. Okay, so the top one is correct. I need to clean up a little.  So wait, now you need to also tell it which feature. So now link the feature folder. So the direct one, right?  So the direct folder is called Beam Dock's Path Resolution Fix. So you can search for path. Yeah, there you go.  Yep. So this is it? Yeah, that's it. That's all you will need to do because it has the task and it has the context.  Yep. So that's how it will always be. You have a workflow and you have something to apply the workflow on, right?  You have an automation. You need something to apply it on.

15:50 - Mujtaba Ahmed (beam.ai)
  Okay, so we're creating a feature for this Beam Dock's Path Resolution Fix. Okay.

15:58 - Dorian Schlede (beam.ai)
  And now it should read all the files. Let's see if it does it. There you go. So it has read the complete feature description.  And you see now how it's so much better because you don't clutter with the planning, with the analysis.

16:10 - Mujtaba Ahmed (beam.ai)
  the thing was sort of mixed up and I was very unclear, like, what the  is going on? Mm-hmm. Okay.

16:17 - Dorian Schlede (beam.ai)
  And now what it's doing is it is now creating the PRD.

16:23 - Mujtaba Ahmed (beam.ai)
  Ooh.

16:26 - Dorian Schlede (beam.ai)
  And then it is implementing it.

16:30 - Mujtaba Ahmed (beam.ai)
  For implementation, we'll go to the second one, no? So, like, this feature now cleans up, I think, no? Yeah.

16:36 - Dorian Schlede (beam.ai)
  So this is a little bit mixed up. So now it's a bit – now the PRD is already created by the second chat.  Maybe I change it again. But now the first chat gives you what you see already on the left-hand side, right?  So you have the licitation insights, you have the feature – that's what the first chat gives you. And then the second chat essentially reads it and turns it into a plan.  And I'm not sure, maybe I need to change it a little bit at the PRD. Yeah. PRD also comes out of the first plan, but yeah, let's see, what's the PRD?  Yeah, there it is. Okay, let's read it. Yeah, there's your migration. And this I will now also automate, right?  So you don't have to, you know, know how to do this. I will also turn this into a migration workflow that will just plan out the full migration for you.

17:45 - Mujtaba Ahmed (beam.ai)
  It's crazy how like, like, you know, like if you implement it, you sort of like get the real feedback and then sort of like implement the feedback to automate things.  Yes, there you go. Okay.

18:00 - Dorian Schlede (beam.ai)
  And let's see what did it put in the progress. You know, just read the files a little bit so you understand what's going on, right?  So the progress, this is the file it will constantly update. this is not...

18:13 - Mujtaba Ahmed (beam.ai)
  Period two to three hours. Yeah, that's not true.

18:16 - Dorian Schlede (beam.ai)
  I will fix this at some point. So literally, it's more like 10 minutes. Yeah. But this is like a yellow hot tag.

18:25 - Mujtaba Ahmed (beam.ai)
  Yeah. Like I came across some of like these placeholders when planning. So it would give you like a weekly plan.  It would give you like a roadmap or something. And you're like, dude, I don't know. I don't have that much time to do all of this .  Like, what are you talking about?

18:40 - Dorian Schlede (beam.ai)
  Yeah, but it doesn't know that it only takes 10 minutes to implement. It doesn't know it yet. Yeah, it looks really good.  Create... That's mapping, specification. So it's really focused on only mapping the data. You know, it doesn't create agent. It doesn't do anything else.  It only focuses on...

19:11 - Mujtaba Ahmed (beam.ai)
  That's what we needed to do, right? Migrating your stuff. Yes. Makes sense. Okay. I kind of get the gist of it now, like considering how you're planning a feature.  So you use the orchestrator to plan the feature, then you close the chat and you go to the other and then you load up the, what's it called, the orchestrator again?  And then you implement a feature based on what it has previously planned. Yes.

19:37 - Dorian Schlede (beam.ai)
  And then the last important thing is doing UltraThink. So now, just for fun, just put UltraThink in the chat and then send it.  Yeah. So now also it might feel like you're waiting a lot and it's very slow, right? But if you then, if you read the stuff that it produces and then you actually do three things at the same time, then you are very busy.  It's like super overload of content all the time.

20:23 - Mujtaba Ahmed (beam.ai)
  This is good. This is good content because like earlier, like when we did the mapping, I think it did like a terrible job because like I just asked it to migrate everything together.  It just didn't work. I think the first thing that it's doing right now, I'm not even focusing on the main features.  So right now it's doing a mapping, like sort of like a restructuring or something. Once it's done that, then I think...  Correct me if I'm wrong. So like once this is done, we're going to implement this in a new type and then close that and then use the orchestrator again to serve.  to like plan what needs to be done next. So you're not really telling it what needs to be planned.  You're asking it to sort of like think about it, right? Yes.

21:09 - Dorian Schlede (beam.ai)
  And now the interesting thing is the UltraThink validation. So this catches the biases. So the system already knows. So there's a context file that tells it what it often does wrong.  And it will now kind of detect its own issues. So it will review what it did, but it knows what kind of issues it has, and it detects the issues to fix them.  But the UltraThink is not working as it should because it's a claw functionality. So once you move to the clawed code, you will actually get the full value.

21:49 - Mujtaba Ahmed (beam.ai)
  Oh, okay, okay.

21:51 - Dorian Schlede (beam.ai)
  Okay, but this is now fine because essentially if you scroll up, it essentially says that the only problem that you have is that you didn't actually implement it, I think.  And it's... Sometimes it doesn't. You have a critical issue, and you didn't actually implement it.

22:06 - Mujtaba Ahmed (beam.ai)
  That's awesome. I'm just planning a feature right now. Yeah.

22:13 - Dorian Schlede (beam.ai)
  OK. But that's fine. You know, sometimes it says it's the only issue is you didn't implement it. So that's fine.  So now you can say close chat. can open a new chat with the orchestrator. Or you could also just implement it here.  I mean, but how much context do you have used? 55%. You see, you saw it was 55% already, so it makes sense to close.
  ACTION ITEM: Clean up duplicate/backup orchestrator files in system
 - WATCH: https://fathom.video/share/DJCMNFkitK2i8Av41xirFjWwuBrupeFt?timestamp=1356.9999  And there are two chats.

22:38 - Mujtaba Ahmed (beam.ai)
  So one is, like, we're going to go with this framework very close, right? Because it's like one.

22:42 - Dorian Schlede (beam.ai)
  see the other one is some kind of backup. It has a backup folder, yeah. So this, I will need to clean this up.  I will. Yeah. Now, the next orchestrator guy.

23:08 - Mujtaba Ahmed (beam.ai)
  Did you build this entire system yourself?

23:13 - Dorian Schlede (beam.ai)
  So I took it from the BMAT thing that had a very, very simplified architecture of this. Then Burak implemented the memory feature.  So he built it kind of, he had, I gave it to him. He took it for a ride for a day what I built, and then he added the memory feature.  Then he gave it back to me. And then I, once you have this memory feature, so once you have this session persistent memory, the system gets 10x.  So as soon as I had it, everything was so much better. And the whole implementation, everything got 10x better.  And then it's kind of, you know, spiraling faster and faster. And, yeah, and then I built everything myself, yes.  So then at some point, it was too much. started to, I Yeah, so there you go. Now it suggests even the next best action because that's what you last did.  So now you can just type one and again go for add implement. Right, so add implement feature and then you just say one, but I mean it should have done everything, just say one, but whatever.  Yeah, probably if you would have said one, it should have also worked. Is this like my OCD with?

24:34 - Mujtaba Ahmed (beam.ai)
  No, that's okay.

24:35 - Dorian Schlede (beam.ai)
  And then I got to a critical point where I, it kind of got out of control. So at some point I didn't fully constrain what I was doing and it generated too many random documents.

24:47 - Mujtaba Ahmed (beam.ai)
  Yeah.

24:47 - Dorian Schlede (beam.ai)
  And you cannot always keep all files updated. So you will always have some deprecated files somewhere in the system.  So this is not preventable. You can even do that to take care of it, We can have a feature that takes care of the deprecated file, right?  I'm also doing this right now, but yeah, it's a lot of maintenance stuff. And you kind of need to accept that you will always have outdated files somewhere.  So always...

25:18 - Mujtaba Ahmed (beam.ai)
  for sure. Even I noticed it came up with some random  and then you're like, and the file isn't just relevant.  Yes.

25:28 - Dorian Schlede (beam.ai)
  And then I actually, my system was broken. So then I had implemented some stuff that was incorrect and then some stuff broke.  And if your memory feature breaks, suddenly nothing works anymore. And then you're like, , now I'm back to the stone age.  And yeah, then I had to rebuild it. So then I had to strip it down, remove most of the stuff and start fresh.  And then it took me a full day to rebuild everything. But then I... I... I actually really thought about how I rebuilt everything.  I had this index, which is like the central context, sorry, the central registry. So it knows where everything is, so where all the files are.  And then I learned I have to always keep the index updated. So it does, it always knows what it has access to.  And before this, that got outdated. So you need these central context management files where it kind of tells it, if you want this go here, if you want this go here, and these must never be outdated.  So then I kind of implemented this mechanism that this doesn't go outdated anymore. And then it became much, much more reliable.  And once I had this baseline established with the memory, then I implemented the automatic learning. And from the automatic learning, it has now built self-optimization things, keystrokes, or self prevention.  Features that kind of, from the learnings, make sure that it doesn't happen anymore. But yeah, okay. So interestingly, what is it doing?  I'm just looking.

27:14 - Mujtaba Ahmed (beam.ai)
  It created a couple of files. was looking into this path, mapping specification file that it created here. see? Which does seem correct to me.  So it's taken this extract Airtable Knowledge MD, right? This is like a specific task that I have. And now it's taken it from here, and it's going to add it to the briefings.

27:42 - Dorian Schlede (beam.ai)
  Not where you want it, right? Exactly.

27:45 - Mujtaba Ahmed (beam.ai)
  I think it was correct for it to be in the task. But why is it putting it briefing?

27:49 - Dorian Schlede (beam.ai)
  Yeah, it should put it into the operations tasks. Mm-hmm.

27:54 - Mujtaba Ahmed (beam.ai)
  So you will need to fix this.

27:57 - Dorian Schlede (beam.ai)
  Oh, now we can also use the core learning feature. Interesting. Definitely. So allow list. Yep. Now that's also very important.  So the interesting thing now, if you do this and you put a learning, I can also just pull all the learnings from you and use them.  So the one important learning here is now. So when we do a migration, always put the logic of the user inside the operations folder into agents, workflows, and tasks, right?  So that's kind of...

28:31 - Mujtaba Ahmed (beam.ai)
  And how can I call a learning sort of a...

28:35 - Dorian Schlede (beam.ai)
  Yeah, it's called a primitive learning, I think. No, I don't think it's this one. Prim. Not with E, with I.  Yeah. Yeah, this one.

28:52 - Mujtaba Ahmed (beam.ai)
  Okay.

28:54 - Dorian Schlede (beam.ai)
  But you could also just say, learn this. So you don't need to actually always reference the file. Most of the time it also even works.  Without referencing, but it's always the safer bet. Yeah, inside the operations folder. And maybe now we can say also the mapping.  So map automations, single automations to tasks, map complex automations to workflow, you know.

29:47 - Mujtaba Ahmed (beam.ai)
  Anything for agents?

29:50 - Dorian Schlede (beam.ai)
  Yeah, map agents into, yeah, map agents into agents, I guess.

29:58 - Mujtaba Ahmed (beam.ai)
  Okay. Ah, now there's

30:00 - Dorian Schlede (beam.ai)
  It's one very important thing. Yeah, just say map agents to agents. There's one very important thing now. So if you go inside the framework folder, which is above the operations folder, and then there is templates.  And this is now what every agent looks like, what every task looks like, what every workflow looks like. So it's a schema on what each agent looks like or what each task looks like.  So when you do a migration, it's important that you migrate to the schema. So this is very important. So you always need to upgrade to the baseline logic because this makes it fit all together.  together. All right. Yeah.

31:15 - Mujtaba Ahmed (beam.ai)
  And this is the framework, right? Yeah.

31:19 - Dorian Schlede (beam.ai)
  You can also, by the way, drag and drop the folder.

31:26 - Mujtaba Ahmed (beam.ai)
  Which one? Sorry?

31:26 - Dorian Schlede (beam.ai)
  You can drag and drop the folder into the chat. So you can just drag the templates into the chat.

31:36 - Mujtaba Ahmed (beam.ai)
  Ah, interesting. Yeah.

31:40 - Dorian Schlede (beam.ai)
  Nice feature to know. Yes. Now say, this is critical to your survival ultra thing. And you will see it will research so many files if you say this is critical.  critical. Equals to your survival, it will read so much context. It will think so hard.

32:09 - Mujtaba Ahmed (beam.ai)
  Yes. Yes, that's the easy one. But I think it's also equally important to know within the system what happens where.  Because for a new user, for someone who hasn't really gotten the understanding of the system, they would be a bit confused where each file should go.  Yeah, like structuring is very important. Maybe it would make sense to have this as a workflow or like perhaps like a feature, you know, so you know that, okay, okay, these files go here, these files, because like everyone has, has been building their own systems.  So they were, if they were to migrate on this system, they'd need to.

32:51 - Dorian Schlede (beam.ai)
  Did you, did you do the onboarding sequence?

32:58 - Mujtaba Ahmed (beam.ai)
  Yes. afternoon. Let's send it again.

33:01 - Dorian Schlede (beam.ai)
  Did you do the onboarding sequence? Because there is an onboarding guide, right? The onboarding guide should explain this to you.

33:09 - Mujtaba Ahmed (beam.ai)
  Okay. No, I think we just, like, because, like, on this chat, we started together, so I directly went with the orchestrator rather than anything else.  Perhaps because you knew the context, right? So you were, like, sort of, like, giving me the context along the way.

33:26 - Dorian Schlede (beam.ai)
  Let's open the orchestrator again and see if it can teach you the beginner guide. It should still be able to.  But I will also need to hop now. I will also need to hop in a minute to Asad. But I think you kind of got the gist of it, right?  So it's really about slicing it down, and then it's about multitasking. Okay. So slice it down, learn how it works, really understand what's going on, and once you've done this three to five times, you kind of get how the feature development works, and then you can start speeding it up and do two or three at the same time.  But first, you need to be really aware of what it's doing, like take your time, read it. I think it's also really interesting to read it and understand what it's doing, where it's putting stuff, and so on, right?  Makes sense.

34:32 - Mujtaba Ahmed (beam.ai)
  sense. I mean, sometimes you can't understand.

34:34 - Dorian Schlede (beam.ai)
  I mean, this Echo stuff, I don't get, but whatever. This stuff is not like very clear to me as well.

34:41 - Mujtaba Ahmed (beam.ai)
  Yeah, but that's okay.

34:43 - Dorian Schlede (beam.ai)
  I mean, obviously not everything is clear to me either.
  ACTION ITEM: Experiment with AI system - move existing content as features, test if they work
 - WATCH: https://fathom.video/share/DJCMNFkitK2i8Av41xirFjWwuBrupeFt?timestamp=2094.9999
  ACTION ITEM: If features don't work, report back to Dorian; if they do, continue developing more
 - WATCH: https://fathom.video/share/DJCMNFkitK2i8Av41xirFjWwuBrupeFt?timestamp=2094.9999

34:48 - Mujtaba Ahmed (beam.ai)
  Moving everything. Okay. So you need to move everything. Sorry?

34:59 - Dorian Schlede (beam.ai)
  Okay, Mucha, will hop over now. I don't want Until that, Asad, wait. Keep playing around. Move your stuff as features.  And then test if they work. And if they don't, get back to me. And if they do, just develop more.

35:16 - Mujtaba Ahmed (beam.ai)
  Sounds good. Sounds like a plan.
  ACTION ITEM: Start building actual content for Beam Academy using new AI-assisted workflow
 - WATCH: https://fathom.video/share/DJCMNFkitK2i8Av41xirFjWwuBrupeFt?timestamp=2123.9999

35:18 - Dorian Schlede (beam.ai)
  All right. The knowledge is also available. Did you see this? So you have now 2,500 knowledge pieces available. Congratulations.

35:29 - Mujtaba Ahmed (beam.ai)
  Sounds good. Perfect. I'll experiment a little more. Let's see if it works.

35:34 - Dorian Schlede (beam.ai)
  Cool. Now let's actually start building the stuff. Let's get going, right? To actually put the content up there. Yeah.

35:41 - Mujtaba Ahmed (beam.ai)
  I think that's like the main goal now is to get this up and running. Okay. I'll experiment further. I'll let you know if I have any doubts or anything.  Yeah. Cool.

35:50 - Dorian Schlede (beam.ai)
  Then happy weekend. Maybe see you on Sunday. mean, I look right around the corner. I'm meeting my dad and stuff.  But we can have a chat to see if we can hang out.

36:00 - Mujtaba Ahmed (beam.ai)
  Sure. We can have a or something. Just let me know whenever you're free, like we can plan something around.

36:04 - Dorian Schlede (beam.ai)
  All right. See you. Bye. Excited to meet you. Bye.

36:09 - Mujtaba Ahmed (beam.ai)
  See you soon. Bye-bye.

Solutions Weekly - August 29
VIEW RECORDING - 47 mins (No highlights): https://fathom.video/share/B82LorDe5sqoyxNHofP-SYKi_DM7tapC

---

0:00 - Dorian Schlede (beam.ai)
  But, you know, marketing and reality might drift a little bit.

0:07 - Sven Djokic
  True that, true that. I like the slogan that they have, agents that actually work.

0:16 - Kilian Sorg
  That's, I think, the core point, right?

0:19 - Dorian Schlede (beam.ai)
  Because most actually don't work. So if you explain why yours work, I think it's a valid sense of it.  Yeah, the proof is in the pudding.

0:33 - Sven Djokic
  The proof is? In the pudding, or the pudding, or how to say it. I think it's a saying, right, in English?  The proof is in the pudding? Proof is in the... I don't know.

0:50 - Kilian Sorg
  I add this as a learning to my page.

0:53 - Sven Djokic
  The proof is in the pudding.

0:57 - Dorian Schlede (beam.ai)
  The pudding, I'm not sure how to pronounce it. The proof pudding.

1:00 - Sven Djokic
  Yeah, it basically means that you have to try out things to actually see if they work or not in this case.  Hmm, that makes sense.

1:13 - Dorian Schlede (beam.ai)
  I think you do. Okay, who, who, Hassaan, were you doing it, Kilian, who was doing this meeting? I, sorry, I forgot who's doing the, the other one, who's doing the Tuesday one?

1:28 - Hassaan Ahmed
  Um, so last time I did it, generally Kilian does this one, but I can do it as well.

1:34 - Sven Djokic
  Uh, Kilian, what do you want to do? Uh, I think we didn't make a decision.

1:37 - Kilian Sorg
  I always did it when Dorian wasn't there. I guess it would be good. I we also did it. Uh, maybe we can make up our mind and then, uh, the first knows.

1:46 - Dorian Schlede (beam.ai)
  Yeah, you can also rotate. Uh, Sven, you want to do it today? You haven't done this yet, have you?  No, I can, I can also do it.

1:55 - Sven Djokic
  Okay, your turn.

1:58 - Dorian Schlede (beam.ai)
  we have Ask Firefly?

2:00 - Jack Li
  How do you ask Fahy Fahy Fahy Fahy? Hey Fahy Fahy Fahy.

2:06 - Fireflies.ai Notetaker Hassaan
  Pick up one to host this meeting. Give me a name.

2:20 - Sven Djokic
  Never mind, it's very good.

2:22 - Jack Li
  Did it give you a name?

2:24 - Dorian Schlede (beam.ai)
  No. Interesting, right? Because usually it happens to hear my voice as well.

2:29 - Jack Li
  One more time.

2:31 - Kilian Sorg
  Hey Fahy Fahy, pick one of the participants from call as this week's moderator.

2:44 - Sven Djokic
  Based on the discussion, Sven Djokic has agreed to be this week's moderator since he hasn't done it yet. If you'd like me to officially note Sven as the moderator or assign this as a task, just let me know.  We biased it.

2:59 - Dorian Schlede (beam.ai)
  Okay. Okay, sounds reasonable, but let's do it. We just always ask VAI what we should do.

3:17 - Hassaan Ahmed
  Yesterday, I spent the entire day actually talking to VAI apart from meetings. So from morning until afternoon, I was doing cursor.  And after that, I was doing plot.

3:30 - Sven Djokic
  At 8 p.m., was like, okay, I'm done.

3:31 - Hassaan Ahmed
  I need to talk to people now. I should talk to my VAI.

3:36 - Jack Li
  Yeah, same.

3:40 - Dorian Schlede (beam.ai)
  Okay, but then let's start with the pre-roll topics.

3:44 - Sven Djokic
  Like anything that we should discuss before we jump into the personal updates? Anything pressing?

3:51 - Dorian Schlede (beam.ai)
  No, maybe just one information just so that you're aware. So I have hooked up the interview automation now. So every...  every... Transcript that you do will be automatically analyzed, okay? But I'm only extracting knowledge at the moment, right? So it's only to get knowledge for the Beam Academy.  You can also review it. There is transparency on what we're doing. We now have 2,300 knowledge pieces for Mustaba Extracted out of 250 calls.
  ACTION ITEM: Create documentation for optimal way to set up a feature in Nexus
 - WATCH: https://fathom.video/share/B82LorDe5sqoyxNHofP-SYKi_DM7tapC?timestamp=270.9999  So yeah, just so that you're aware, if you don't want something recorded, just don't use the guy, right? Yeah, just as a...

4:34 - Sven Djokic
  Maybe... All the Fathom transcripts then to Notion, basically? No, we put them into Airtable, then I extract the knowledge.
  ACTION ITEM: Clean up evaluation framework with interface; prepare for assisting Sven and Kilian
 - WATCH: https://fathom.video/share/B82LorDe5sqoyxNHofP-SYKi_DM7tapC?timestamp=286.9999

4:43 - Dorian Schlede (beam.ai)
  So now you can access all the meeting knowledge through MCP, essentially. Nice, okay. Or API, whatever you want. Yeah, I have one topic here.

4:57 - Jack Li
  I understand, Sven, Kylian, you all need this evaluation. you. I will come to office today, but only in a few, I believe around the four, maybe, so quite a few hours, if you are there, we can discuss, or next week, let's find dedicated time.  So before our alignment, I need to clean up the evaluation framework a little bit with interface and everything. Then I will assist you.  Let's go through the process together, but it would be nice to understand the deadline, right? So I can know how much prepare work I can do.  If it's not that hurry, I can prepare better. If it's hurry, let's go through the process together. That's something I would like to know.  Yeah, so far, that's also be my highest priority to help you go through the process. So don't need to worry, just let's book a time, go through this together.  Yep, that would be great.

5:49 - Sven Djokic
  Like today, I won't be in the office because it takes me 60 minutes right now, one way, because it's a beambandstörung.  Nick, I think all of us will be like there anyway, right? And Bena and... Shlaba, I think he was well and Asad, it's like we could do like Monday or Tuesday, whatever is best for you.  Okay, then I will, Dorian, then I will not be there today too.
  ACTION ITEM: Discuss next steps and timeline for evaluation framework with Jack and Kilian
 - WATCH: https://fathom.video/share/B82LorDe5sqoyxNHofP-SYKi_DM7tapC?timestamp=375.9999

6:13 - Jack Li
  No, I might. Yep. Okay, then, yeah, that's my topic. Just noting it down.

6:26 - Sven Djokic
  So Jack, Kilian, and me. So I'm going to discuss next steps and timeline. He will, framework, or projects, I'll try which one of yours, Kilian.  Okay, any other prior topics? Prior topics? No? We can jump into the personal hub. Okay, there's still like a timer here, three minutes.  Given timer three minutes.

7:16 - Kilian Sorg
  Oh, I see.

7:17 - Dorian Schlede (beam.ai)
  Sven is leading the meeting, we're getting real.
  ACTION ITEM: Share agent setup automation with Sven and Kilian; gather feedback for corrections
 - WATCH: https://fathom.video/share/B82LorDe5sqoyxNHofP-SYKi_DM7tapC?timestamp=440.9999

7:22 - Sven Djokic
  That's awful, guys. So, you want to start, Hassaan? Yeah, I can go. So, I would say, we've already discussed the agent setup.

7:31 - Hassaan Ahmed
  Sven, by the way, Rui and I got stuck in doing this automation, so I couldn't send it to you yesterday, but I'll be solving the issues today that we discussed yesterday, and I'll be sharing it with you and Sven both.  So, it would be great if you guys can just have a look, create some base agents with it, start with base agents, let me know.  The idea is to just gather feedback from you guys, so that then I can make all the corrections that, whatever you suggest, I'll just sort of make all those corrections.  So, that's one. The second biggest learning, one thing. One I haven't mentioned here was actually interacting with MCP. So yesterday, actually, day before yesterday, I actually created an entire agent template using Cursor MCPs with Notion and Airtable.  So it was all just one chat, asked her to create a database, gave it the agent use case, populated the database, removed all the entries, changed, updated the Notion sub page as well via MCP.  So you also created the Airtable database? So basically, here's how it looked, I probably will end up going over three minutes, guys, because there were a lot of learnings.  So there were these Aramco agents that we built, and throughout the entire thing, so these are two agents, and I gave it basically a use case that this is the agent that I want to be.  I asked it to write the prompts. Let's let it load as well. Asked it to write the prompts, create documentation that we also sent.  Is it the A table steps? This is all. Yeah. So I just asked it that put the daily tasks for some previous dates as well, three days back.  So it ends up creating the records as well. And it's not that I gave it anything. I just confirmed.  So I asked it to first generate me a schema. It generated the schema. I commented on it. Then I asked it that I don't like it and made it fix the schema.  And it's not only schema. It actually did it better than me in the sense that generally with A table and stuff, I create a base or I create a table.  I don't put in the description of the table and stuff, right? Because who does that? I actually had to go and see that where do you even put the description because I never knew that this feature existed.  So it also did that, which is good. I didn't know that you can actually do that, but yes, so basically all this is populated by Claude, nothing by me.  I was just confirming or denying it, and then I ended up taking all this information, putting it into a format, and putting it on Notion as well, YMCP, which was great.  So that's secondly, something that we discussed yesterday, and actually ended up being quite simple than I was thinking of it to be, which was that we have this demo workspace, which is called Team Finance Operations, and the sales team felt like this can be a very good workspace to demo a host of capabilities.  In order to do that, what we wanted was that there should be tasks on a daily basis. So now I have written a script, obviously via Claude, that basically now automates the entire thing.  So now you see all these tasks for August 29th. So every two hours, it ends up sending tasks. So now in all these agents, I am sending tasks automatically.  And all I have to do is, I take my, because I've had all these calls on Postman already, or some I had to build because I hadn't built them earlier.  So now you see all these files here on the left. These are basically the codes from Postman. And these basically curl every two hours.  And now I was like, these are too many tasks. So now I've changed the frequency to four hours. So now every four hours, each of these files would basically run, and you'll see a host of tasks on each agent.  So basically whatever webbook they relate to.

11:39 - Sven Djokic
  That's really cool.

11:41 - Dorian Schlede (beam.ai)
  How do you, so, so how does it work that it automatically runs? So is that handled by GitHub? It's handled by this code here.

11:50 - Hassaan Ahmed
  I call it code. Maybe some engineers would call it just two lines, but yeah. So you see the strong code here to the schedule, which is like, every four hours.  And it's like, It triggers automatically and here there's the entire curl code so it already contains the web book and stuff and all the content that's supposed to be sent and it's not like I'm only sending text files it also contains like base64 encoded files as well so you if webbook is this then you end up running it and when everything is done it just sends you a message that I've done the entire thing but I basically know it beforehand because I end up receiving the emails as well at service at the I keep on getting shitloads of notification the entire day on the demo agency completed but it's quite cool in the sense that anytime you go into a demo you have like latest runs better analytics because it's for the entire week so yeah super cool I'm just curious like how much does it cost us for like each of these runs we in terms of me in terms of me I mean what what  Yeah, and sorry, I think, I mean, GitHub, et cetera, it's free, but in terms of the tasks being created and the GPT calls, I'm not sure.  Hmm, you mean the API cost? Yeah, I mean, because obviously we're running all these agents, right? So now, what's the cost of each agent?  And because we're running them so frequently, what it would end up costing us. Right now, we have credits, but in general, we can do that calculation, yeah.  Yeah, I mean, how many are you running per agent? So basically, it's one task per agent, two tasks per agent, and right now there are six, so 12 per four hours, so 12 into 6, 72 tasks per day.  But it's going to increase, right? Think of it this way that there are going to be, yeah, there are going to be, let's say, 60 agents when we get there.  So if there are 60 demo agents, 60 tasks, six times a day, that's 360 tasks on a daily basis.  당연star, actually tasks. On On On Average.

14:01 - Sven Djokic
  Maybe more. Yes. So then we can have this conversation on if we want to decrease the frequency.
  ACTION ITEM: Put GitHub automation code into solutions repo once GitHub access obtained
 - WATCH: https://fathom.video/share/B82LorDe5sqoyxNHofP-SYKi_DM7tapC?timestamp=853.9999

14:10 - Dorian Schlede (beam.ai)
  Hassaan, you had so many learnings in what you said. Could you put them here as well? I mean, we're also extracting them anyways, but it would be really interesting to get actually all your learnings out.  Yeah. Thank you. Thanks, guys.

14:24 - Hassaan Ahmed
  And I, by the way, once I get the GitHub access, GitHub Seed, I'll put this into a solutions repo, so like everyone can access it as well.  Once Aqib is back, we have the Gits app.

14:38 - Dorian Schlede (beam.ai)
  Yeah.

14:40 - Sven Djokic
  What four learnings do we want to put now into the comment table, like how to automatically trigger postman your calls?
  ACTION ITEM: Generate summary of learnings from meeting; add to comment table under his name
 - WATCH: https://fathom.video/share/B82LorDe5sqoyxNHofP-SYKi_DM7tapC?timestamp=882.9999

14:53 - Hassaan Ahmed
  I'll, I'll generate a summary and put a few in this table and under my, nice, thank you.

14:59 - Sven Djokic
  Oh, the best.

15:00 - Dorian Schlede (beam.ai)
  Our question is, how can we automatically use the transcript to document this automatically for us? Yeah.

15:12 - Hassaan Ahmed
  So, so, so what I, I mean, with, does NNN connect to Notion MCP? If it does, then we can do it.  I think it does. I'm not, I'm not sure though, but because I have this automation already now running on our platform via Fireflies in the sense that all Fireflies nodes, I sort of aggregate them, generate, generate all the summaries that I want to generate and then send them to the relevant channels for the calls that I leave.  For example, GTM demos and stuff or calls between me and the GTM team. I send it to, relevant people, but populating a database is something that we have to see on Notion.  I don't think Firefly, even Pipedream gives us the, the functionality to, to, We databases yet.
  ACTION ITEM: Continue experimenting with Nexus system builder; translate workflows into features for Academy update
 - WATCH: https://fathom.video/share/B82LorDe5sqoyxNHofP-SYKi_DM7tapC?timestamp=963.9999

16:02 - Sven Djokic
  Yeah. Okay. We need to check this. Okay. Let's jump to the next one. Thank you, Hassan. So let's go to Mujtaba.  Thanks, Sven.

16:14 - Mujtaba Ahmed
  Hassan, that was pretty sad, by the way. On my side as well, I believe most of our learnings are primarily based on like bi-coding these days and what we're doing on Cursive.  Essentially, so pretty much the same. At the moment, I'm experimenting with like these system builders that Dorian has, you know, experimented or come forward with.  So at the moment, I'm experimenting Nexus and trying to translate workflows into like these proper features that can basically do different tasks related to like the Academy update.  So I would say that it's still a bit hypothetical at the moment because I haven't gotten one feature to like work end to end at the moment.  So I would be able to share more learnings once. Thanks. Thanks, guys. Thanks. You know, I've been able to get, I've been able to get like one feature working properly.  But yeah, like the learning so far from my side is that essentially we need a good system on top of what we're building to basically add that structure to everything.  And I was able to create like a very good project brief out of the previous system just by sort of like interacting with the system on Gurser.  I think it was quite fun to sort of like, you know, give it instructions and then ending up seeing the project brief being created.  So I guess I'll have more of a like a detailed update like next week once we have experimented a couple of features and try to sort of see how what the content is coming out to be.  Yeah, I think that's about it from my side. Cool.

17:53 - Sven Djokic
  Thank you very much. From. Then we saved some time as well. The next one Kylian.

18:03 - Kilian Sorg
  Yes, not much from my side. One quick question. I am very excited to get my hands dirty as soon as possible with this.  Nexus from Dorian. So my question was here just, did you discuss in the call where I had to drop off how to just set it up and get it into Cursor?  Is there anything out there that explains this maybe? I can explain it to you right now.

18:31 - Dorian Schlede (beam.ai)
  So I sent the zip file. So in the future, you will just clone it from Git. At the moment, you cannot do this because you don't have the GitHub access.  So what I did is I sent a zip file into the chat in Slack. You can just download this, then you unzip it.  Then you open a new window in Cursor and you just open the Nexus template folder. And then all you need to say is if you use Cursor.  And And if you use Claude, you only say Claude High, and then you start. Okay, and when you open the Nexus thing, this would be the file that I unzipped, right?

19:15 - Kilian Sorg
  Yes, open the template as a folder, yes.

19:17 - Dorian Schlede (beam.ai)
  So, yeah, the template is already two days old, so it's heavily deprecated. So I can give you something much better, probably, yeah, I need to, you know, I'm always building, and then I now need to consolidate again, so I will give everybody something much, much more reliable and much, much better early next week.  And a lot of things have already changed again, so you can use it, but be aware that, yeah. It'll change?  It's evolving itself, essentially, it's self-evolving. The AI is optimizing itself, so it changes all the time, but you can use it like that already.  Dorian is working in two days. Dorian
  ACTION ITEM: Continue testing new error handling feature for integration nodes; check for bugs
 - WATCH: https://fathom.video/share/B82LorDe5sqoyxNHofP-SYKi_DM7tapC?timestamp=1212.9999

20:13 - Kilian Sorg
  That's crazy. Okay, I will do this just to play around with it and then excited for the new release of Nexus.

20:22 - Sven Djokic
  Super cool.

20:23 - Kilian Sorg
  And then in terms of learning from my side, this morning they released the change for error handling of integration nodes, which I'm really excited about.  I don't know how it is for you guys, but I have multiple projects where I'm interacting with ADF API endpoints from clients that are designed very poorly.  So let's say I want to retrieve user information, but there's currently no user. I would get not a 200 response, but most of the time it's a 400 response.  And then the agent would stop and I would not be able to continue, even though usually now the next step would be to create the user, right?  If there is. So this has been blocking some nicer ways of handling workflows for our agents, and this was released tonight.  I just tested it out. It works. I will continue testing it out to see whether there any bugs. Just wanted to share if you have this on your project.  We have this now in the tool, and I think it's a game changer if you're interacting with these kind of poor API endpoints.  So let me just share it if you haven't seen it already. We click. That's pretty much it. Yeah, that's the Rob Freiser workflow.  Yeah, I'm retrieving customer information in this node through the user email. I hardcoded now an email that is currently not existing, so it would fail, right, as a static input parameter.  And now this is new settings on error. You can select here, continue using error output, right?

21:54 - Sven Djokic
  This is what we want to do.

21:55 - Kilian Sorg
  And then it would parse the response with the error. into the agent, and then you can create a branch based on it.  So in this example, it worked out, right? I have a branch, and I basically just said as an edge condition, if there's a 500 error and no customer information was retrieved, go here, right?  Nice. And it worked, and now what I'm doing right now is I can update their order email in their inbox that basically says, no customer found, so they now know why it stopped, rather than not knowing, which is the case right now.  So currently, they have to go into the beam because then they see, okay, it failed here at Search Customer.  Hassaan?

22:46 - Hassaan Ahmed
  I was just saying that, does this work only on the 500 error, or like we can play around with all, no, in the sense that, for example, can we do it in this way that if the error is 500, go in a certain branch?  And if it's, let's say, 200, go in a certain branch. Yes, absolutely. And you can do whatever you want.

23:05 - Kilian Sorg
  You are basically just handing over the arrow message. And then there's a new edge that is making interpretation based on this.  So if you are having different reasons why the agent might fail, you can handle each of them individually with their own branch.  For me, it always fails because the customer is not being found. But if there are other potential responses from the API, you can handle them individually.  Yeah. So I think this is huge. This was a big blocker for a couple of projects. And you can, of course, there are other reasons why integrations might fail.  You can handle each of them.

23:45 - Sven Djokic
  Yeah, that's all from my side. Then, oh, yeah, one more learning. The proof is in the pudding.

23:51 - Kilian Sorg
  I never heard this. So this, I will add this to my vocabulary now.

23:57 - Sven Djokic
  Perfect. Best learning of today.

24:00 - Kilian Sorg
  Over to Jack. Kilian, and then restart for Jack.

24:10 - Dorian Schlede (beam.ai)
  Maybe you should unmute yourself. Ah, . That's, yeah, human makes me stink too, right?

24:18 - Jack Li
  I need to get Fireflies to unmute me. So, it's quite explosive learning from all these days. Yes, they are finally can build some feature.  I use a linear to get the tickets. No, I use our Beam API to get the task list, trigger task, and get the task content, and then summarize the task with input, the full document, and output.  To have this, to have the major feature, which is the feature engineers, that's how I do this. So, I threw a variable.  So, first of all, I have all my prompts in one folder. Then I pick out one variable. from one of my prompts, I asked to enhance this description, right?  Because for my JSON, I always have something like this. have a JSON key name, definition, context, and then a set category or something like this.  So I have some three paragraphs of one JSON key, for example, the instrument date or something like this, right?  I have pretty short summarize here. So this description to Cloud Code, I asked to enhance. This feature will find the original description, and then check the test data, which will get the task using another feature, get the task content, right?  So retask, and extract, to go through the document with this variable, and find me the pattern in the document, not focus on the value, but find the pattern.  For example, the instrument. Period. It's always a monthly payment. So I ask precisely not focus on the value. Monthly payment could be limited by the test data, but you need to find the position in this document to say something, this is your payment period, something like this, find the document pattern, and then enhance my description of this variable.  This runs pretty good. You at the end result, you have the original description, enhance the description, and then summarize.  Also tell you what kind of pattern they extract from the document. The good thing is, though, I can use this, it has the description, it has my prompt, then also discuss with business owner.  So that's a feature, that's what I tried yesterday. I think it also could be generic. When you want to extract any variables, you want some description, very simple one-sentence description, and find the pattern from the document.  So that's the first step. The second step, I want to pay the expense. Did output two, so I say expected was a number like this, then it will be much more better than writing the experiment again.  So it's still like iterate process about Dorian have this two-day sprint too, but still it's some trying, some learning.  So yeah, this is what I have yesterday. And then one of something maybe we can discuss or think later together is like when we use the cloud code or cursor or our platform, how we interact, how we human interact AI.  Sven, you're already working on human in the loop, which is precisely more focused on the provided expected output part.  But actually, when doing the feature engineers, when we discuss with business owner, like what we do yesterday with a variable, define the variables.  We discuss with them this variable, the date. We should put a month at the beginning or should be using the date as beginning of German format.  Sometimes more things. Like this, how humans interact with AI, how you talk to cloud, how cloud give you instruction, something we can think about together, like gathering some experience, some failures, some facetrate, or some feeling really good when the AI talks to me like this, something like that, right?  Because one example is, I ask cloud to generate PRD there, but I don't have the patience to read the full paragraph of PRD.  So I can't examine whether the PRD is correct. Maybe the AI can give me some feedback with some bullet points that I generate from PRD.  You can examine if these data points are there, because we need to validate the idea. Something like this, I can provide the meeting notes, give me some summarize of the meeting notes, but not summarize, but really something I want to read.  Sorry for this long discussion here. Another example. Let me talk to our platform right now. You remember when they create agent with the dashboard.  I want to create the depth collection agent. Then he will ask me, could you give me more context? What feature you want to have?  Something like this. , if I know I will not talk to you, right? Why you ask me all these open questions?  I have to type all these 200 paragraphs to you. If I can describe this, I will not talk to you.  So what I'm expecting is that AI should give me some, if you ask for depth collection, what variables? Do you want to get the adapter's name, address?  There's something they can think furthermore. So that's how we interact with AI. So this general, really a little bit high level discussion, like not just limited to provide expected output, but we can also think how we gather in the requirement, how we bring the business owner to understand AI, how we really interact.  This is something while we can also think while we work with cloud, it's something we can also implement somewhere.  For example, when we have the kickoff meeting with clients, we can already. Provide the template, provide the survey to them, what business logic you want to achieve, and we're not asking the open question, but we can really provide you with some specific suggestion already, instead of asking, do you want to get the, say, what information you want to get, right?  This is a really stupid open question there. Instead, we can directly ask, do you want adapter's name, address, birthday, click check all the variables you want, and uncheck the variable you do need, right?  It's pretty simple there. We can provide this by the click, instead of asking, what variable you want to get?  What the ? I don't know, right? Something like this. This is how we interact. So the checklist compared to open question, that's a pretty concrete example that we can think all together, when you talk to the clients, right?  I only have one client, so I think it will be more to collect some more experience there. That's all for my site.

30:59 - Sven Djokic
  Nice. Thank you, Jack. Thank I mean, in the end of the meeting, we should discuss how we take these learnings now from the transcript and put it into the table.  But I guess let's continue first. Thank you, Jack. Let's go to, Asad is not in a call, right? Then, actually, I'm the next one.  I can do it short. Lots of learnings and cursor this week as well, but like a humble beginnings. It's like next step for me.  I mean, for example, I saw that for me, it is easier to achieve a better outcome if I do in small iterations, basically.  So like not like try to get like the whole outcome in the first one, but basically, you know, to go note by note and see like that, like the outcome of one note is acceptable.  Well, and then to continue with like the next one. Otherwise, it's hard to improve the system as a whole, I think, at once.  But yeah, I'm looking forward to like the next Nexus version as well next week to see how like I can.  I utilize it. On the other hand, boring for you guys, probably, but I built my first custom integration now, finally.  So I had, like, finally a use case that, like, needed it and build it. And yeah, that's it from my side.

32:18 - Dorian Schlede (beam.ai)
  So, yeah, just because you can generate everything at the same time doesn't mean you should. Yeah, that's correct.

32:28 - Sven Djokic
  Maybe a quick tip for using Cursor.

32:30 - Jack Li
  You can start using it as a really a text editor, right? More smart text editor. Write some prompt, autocomplete, check some small questions from there.  Then don't need to really hurry up to make too big change, right? Yeah, yeah, true that.

32:46 - Sven Djokic
  And also for, like, the generation, I guess it's good not to, like, generate a whole system at once, but, like, single components and then you see how you can build it together afterwards.  Cool. Then let's go to Dorian. Oh, lots of stuff. Nice. Okay.

33:11 - Dorian Schlede (beam.ai)
  So questions. Does anyone have questions regarding Nexus? Did you use it? What's your experience? Yeah, number one. So I see Hassan.  So I know Mujtaba and Jack, you guys used it. I'm not sure Hassan, Kilian. Kilian, you haven't yet. Hassan, have you used it?  And Sven? Okay. I'll be using it today.

33:33 - Sven Djokic
  It's like for me conceptually, but like maybe like this is too long for this, but I'm like still, I'm still a bit confused between the difference between a task and a feature, basically.  And we have like these three components and I'm not sure how they fit together.

33:53 - Dorian Schlede (beam.ai)
  Mujtaba, you were agreeing. Do you also have un-clarities that I can resolve? I think I have pretty much the same thing.  I

34:01 - Mujtaba Ahmed
  related to like tasks versus features, because like I tried to, I had like agents in my previous system, you're pretty aware of that, right?  So when I migrated it and I tried to create like a feature out of it, it just created like a task, you know, so I wasn't exactly sure what's like the link between it and the setup to feature is a bit complicated, at least for me right now, maybe I haven't given it enough prompts or experimented around it.  But I just want to see what's like the most optimum way to like set up a feature and then make it, get it to work, you know, that's, that's like the main query.  Okay.

34:39 - Dorian Schlede (beam.ai)
  Okay, so maybe quickly the distinction, but that's really good. Tell me the concepts you don't get. So I will have the AI automatically explain them to you when you do the setup, right?  Essentially do a guided tour, right? That's the goal of this. So a feature is a temporary working context, working zone where  you develop new things that you want to have constantly so if you want to build a new agent a new task or a new workflow you will build them as a feature so essentially you say I want now a prompt engineering agent and now plan me this feature and then it will guide you through the planning process yada yada yada and then you maybe we can look at the tips right so split the context you see it on the screen at the bottom so split the context in three chats first you plan the feature the agent or the task becomes a feature a workflow becomes a feature so you know a feature could either be a single task it could be a multi-step execution or a feature could also be I don't know do a memory analysis right or implement behavioral pattern detection or you know I don't know it's and feel  Create a Feature Roadmap. So I've now built a Feature Roadmap feature that automatically builds the Feature Roadmap with you.  It also automatically proposes features to you. So that's also all of this is features. So every piece of functionality is essentially a feature.  It's like a project that spans across two or three chats, right? And that's, again, the context split. First plan, second implement, third test.  Yeah.

36:35 - Sven Djokic
  And then basically once you are done with this feature, like it becomes an agent and like the feature file is deleted.

36:43 - Dorian Schlede (beam.ai)
  No, it's moved to the completed folder. So you also have status management in the features. So very importantly, there is a close chat command.  And that's really important because that preserves all the knowledge, all the learnings. take take look I'll a So, and also moves, for example, moves the feature from active to completed once it's completed.  So I have all this managed for you guys already through the intelligent closed chat feature. Yeah. And that's a command, right?

37:21 - Sven Djokic
  The closed chat. So you write it.

37:24 - Dorian Schlede (beam.ai)
  a workflow. Okay, it's a workflow. So it's a sequence of tasks, right? So I say execute the workflow. It looks inside the workflow.  Inside the workflow, there's multiple tasks. It looks at the first tasks. It loads the task page, right? So it's a context cascading, right?  Workflow is a bundle of multiple tasks. And each task has its own file with a description on what it does.  Mm-hmm. Understand. Okay, cool. Yeah. Okay. So I see there is conceptual questions. Let me see if... I can create nice to understand documentation, but ideally I just implement everything into the onboarding sequence for you.  So there's a lot of stuff there. Now second question, did everybody use MCP yet? Did everybody had success with MCP?  Not yet. Okay. So then Sven, let's have a chat or let's get this going. So that you can feel magic as well.  Cool.

38:37 - Jack Li
  Then, let's mute and check.

38:41 - Dorian Schlede (beam.ai)
  Then no blockers for me. Only opportunities. Yeah. And then my biggest learnings. So first off, the AI constantly makes mistakes.  I tell it, dude, you made a mistake. It learns it learns the mistake, it saves the mistake, Then it implements these behavioral rules not to make the mistakes into itself, but it still makes the mistakes.  So even though I have behavioral post-action corrections, it still does the same issues. For example, it doesn't read your full file.  And that's a critical issue, right? Because if you want to build something, the AI only reads a hundred lines of your product requirements document and then builds the feature, then you have a very big problem, right?

39:35 - Jack Li
  Easy, lazy like human.

39:37 - Dorian Schlede (beam.ai)
  Yeah, and then maybe you don't focus, you don't read it fully, and then you think it works, but it doesn't work.  So this is one of, that's actually the biggest trap. Did it load all context? You need to currently still verify if it actually read all the files that it is supposed to.  Good thing. You don't need to understand it. You can just say ultra thing. And then it will self-detect its patterns.  So when you say UltraThink, it will review everything it did, and it will analyze, it knows the behavioral patterns that it does wrong, and then it will catch them.  So it still does the mistakes, but it always catches the mistakes if you ask it to review what it has done.  So that's the beauty of it. And that also allows the self-improvement. So yeah, the UltraThink is absolutely insane. So I plan a feature, it completely over-engineers, it didn't read the files, it messes up everything.  I just say UltraThink, and it catches all issues, and it does it correctly. So yeah, my recommendation is use UltraThink all the time.  It's also a Claude command that just lets Claude reason. So yeah, it just makes the performance much better. You can essentially use it all the time.  So yeah, I sometimes I just do also UltraThink, and than just my task because the quality gets so much better and it's actively focused on detecting its own biases.  That's very important. Cool. Next one, AI can perfectly implement well-planned PRDs. Like I'm literally building three features at the same time.  I have high confidence that these features are working now, which is pretty insane. Like I don't have the feeling I have to validate and check everything anymore.  Yeah, because it now literally just works if you slice it up correctly. Next one, AI doesn't work for you.  You work for the AI. And that's really another centerpiece that Jack and me have talked about. So the core is now, do you give the AI all the context it needs?  So it's about eliciting... the AI needs to elicit your knowledge so the AI needs to ask the right questions to you so that you can give all the relevant information to the AI and that's really really interesting so also to make this more usable yeah we we are making sure that the AI has all the knowledge it needs that's our job essentially yeah okay and then the next one okay that's the question so what's the optimal way to set up a feature I guess I will create documentation in general to make this a bit easier to get into yeah maybe one thing here so this thing will evolve right so whenever you merge your logic and then we move on to a new version of the template you might need to merge your logic again right so I will or I already ready M create
  ACTION ITEM: Implement migration mechanisms for Nexus template updates
 - WATCH: https://fathom.video/share/B82LorDe5sqoyxNHofP-SYKi_DM7tapC?timestamp=2570.9999  ...migration mechanisms so that if you use the current template and I give you the next template two days later, you can migrate, right?  But this will always contain some kind of effort and needs to be guided. So just so that you are aware, up to you guys if you want to use it already or if you want to wait a little bit, but there will be some migration effort until we have all the migration figured out, maybe automatically or very intelligently, but just be aware of that.  And that being said, I still recommend you guys to always move to the latest version because we already have 10 levels above.  Essentially, I'm trying to remove the reliability so that it doesn't read 100 lines and you miss it because that's a critical issue, right?
  ACTION ITEM: Improve Nexus AI to guide users on system interaction and feature setup
 - WATCH: https://fathom.video/share/B82LorDe5sqoyxNHofP-SYKi_DM7tapC?timestamp=2632.9999  So if it doesn't have all the context that it should have and you don't notice, you have a big problem.  So I'm trying to remove this. This issue, right? Also, I'm trying to now enable you to, for the AI to tell you how the system works and for the AI to tell you what you should do.  So Mujtaba, so that you don't have to ask me what's a feature and how do I do the three chats?  The AI should tell you exactly how you should interact with the system, right? So I'm improving this also to increase the user friendliness.  And the third one is the migration logic. So that's my core topics now that I'm working on to enable all of you much better.  That's it. Thanks, Dorian.

44:43 - Mujtaba Ahmed
  Can't wait for the new version as well.

44:46 - Sven Djokic
  Great. Use the current one first. Maybe I will increase more cloud views, but I have put two links here.

44:58 - Jack Li
  One is Deep Learning has the official the new version AI. Obviously. Your course from Cloud Code is very basic concept of Cloud Code, how you really understand what's the difference with Cursor, so it's like basic usage, can, I mean, it's when you have time, really, it's good, listen, just some YouTube, just some video there.  So I want to, maybe, because this problem confused me a little bit, but like difference between Cloud Code and Dorian's framework, so you should, so the Cursor is a chat that you already know the Cloud Codes, you can introduce from here, they can also have sub-agent and workflow, memory, everything, so what's the difference between this, their original sub-agent and Dorian building on the framework agent, you can check the YouTube video there, so that's another framework, it's a building above our cloud system, so it's more obvious with folder managing different agents, more powerful framework, so if you have time, you can also listen for this.  This is one hour long video, but you can find some shorter ones and have an introduction about this framework.  Yeah, this is something if you don't have something to do during the weekend, you can check this. Where is it?  In our chat, yeah. I will send it again.

46:21 - Dorian Schlede (beam.ai)
  Thank you. Yeah. That's literally the time where you can build a product in a week. Yeah. Yeah.

46:37 - Sven Djokic
  Yeah. A bit over time, but I guess that's it for the meeting. Anything? Any last comments? Nope. That's good.  Thank you all. Thanks, guys.

46:53 - Jack Li
  Have a nice day. Excited to see everybody. Bye. Bye.

46:57 - Dorian Schlede (beam.ai)
  Bye. Bye. Bye. Bye. Bye. Bye.

Jack / Dorian 1:1 - August 29
VIEW RECORDING - 33 mins (No highlights): https://fathom.video/share/xc2nySNvrR3hTc-5fiypZjvFzshvyZzy

---

0:00 - Jack Li (beam.ai)
  Set up before the time is spent on cloud. At the end, it's automatically generate the content, refine the content.  There's a quite big text block. It sounds very, it's a pretty precise text block, right? What now? What are you talking about now exactly?  The, the, the, the, when I asked cloud to change my prompt with TCFO. Yeah. So the relevant, quite a lot of text block editing.  Is it good or not? It's pretty good. I think with Cursor before, it's not that smooth, like whole document, the whole paragraph, just in, insert there and keep the whole structure, the data formatting and everything.  Looks very good. I still use some autocomplete, like editing something. So I think these two combinations is really, really good one.

0:46 - Dorian Schlede (beam.ai)
  Do you have your template? So did you abstract a generalized template for your template?

0:52 - Jack Li (beam.ai)
  tried at one time, but then I realized maybe a little bit dangerous because I have to check all this, this small detail, which will,  Already discussed with speed, even like the very small like day and month, if they switch up the place, it's really hard for me to recognize this.  So I decided to completely use the same text block. That's why I'm using auto-complete for a while. I think it's also really good combination practices, right?  So you're editing by yourself, then clear the structure, make sure everything discussed with client are 100% still correct. Ask Cloud to do the thinking, discussion, changing the graphic, find all the variables, design the strategy, not have three groups instead of eight classification.  Classify them together, group them together, find the balance, like three groups, one has 11 variables, another has 4 and 3.  variety is quite okay right now. Okay. anyway, okay, now.

2:00 - Dorian Schlede (beam.ai)
  Okay, I got it. I was just thinking, no, I think for human interpretation and human editing also in the platform later on, right, I think it's important that we have some kind of unified structure that's kind of also easy to read and to interpret for humans, you know.  So I think we need to somehow constrain or build some kind of prompt template that's, you know, if everybody has the same prompt, it's just easier to, you know, to understand or to read what's going on.  But maybe also it doesn't matter anymore. Maybe prompt engineering is already abstracted away and you don't even need to know.  I don't know. I think we're actually, it's alignment.

2:48 - Jack Li (beam.ai)
  I think so far the, the, the, the problem when I didn't, it's, it's, an alignment. Some of the points, I think the variable table somewhere, like the business connection.  And the expected output with the business owner is getting more and more important than writing a product. We need to 100% make sure when they ask for the date, should be the data format, the URL format.  This is something, I can do anyway, whatever we like, but we need to precisely align with the clients.

3:21 - Dorian Schlede (beam.ai)
  You don't need to write the prompt anymore. You only need to collect the requirements.

3:26 - Jack Li (beam.ai)
  Yes, and make sure this requirement is 100% precisely executed during the whole workflow. So that's something, that's something I manually do this.  copy the whole formatting block.

3:37 - Dorian Schlede (beam.ai)
  This the AI will do for you. It will make sure that it always does the correct thing.

3:43 - Jack Li (beam.ai)
  but we don't put too much attention on the validation on this interaction part. still focus on the prompt. But still, anyway, I think it's somewhere next, when we build the human interface.  In the loop interface, not just expect the output. Define the requirement, how we define it together, like yesterday we discussed this, right, so which variables are more important, which variable, how we, actually the current variable table is coming from Christian, some of variables are make sense, some of the variables are not, for example, some classification happens, is this a Hueshten or not, is a variable something like this, actually it makes no sense because this variable is precisely the same as classification, right, when you have this answer, that means that you're already processing everything, I think you start the date and the, some, something, something like this, right, or some variables coming from the letter state, it's pretty precisely opposite, it's an explet in the letter, or something like, is this a Fathom, so this is really, have to read the content, to make some, some decision, so this is, all the variables are different, I think we can, later on, we need to think about the requirement there, to make all the product.  Or generic. Really, that's something magical feeling, right? When the human process owner come to us, discuss the requirements, so we can precisely give a template or some query for them.  You just answer some questions. I have a document here. This is our document. I want you to process. And that's just the letter.  This is what we need. This is the content. This is something we can give some survey to them. What do you want?  You want to get the intention? You want to get the date? So some generic thing we already Ah, that's an interesting idea.

5:33 - Dorian Schlede (beam.ai)
  Maybe we can also generate a list of questions.

5:39 - Jack Li (beam.ai)
  Yes. So this is... No, I don't like questions. Don't ask me questions. Give me some options. Give me some suggestions.  Right? better. Yeah, something like this. Yes. Yes.

5:48 - Dorian Schlede (beam.ai)
  So maybe we can even prepare this for Thursday. You know, what is the gaps that the AI sees? Or where is like open things to talk about or to discuss?  is the that So we don't even have to think about all that stuff ourselves. I mean, for the AI, it's always hard to know what it doesn't know, but I think it's still good at generating ideas or suggestions on what could be improved.

6:15 - Jack Li (beam.ai)
  How we help AI learn the business logic. Something like this. Also relevant to self-learning. Learn the logic. There's document here.  We definitely need to get the date, send the receiver, the relevant entity, the insight. This is a standard process.  We always get this. And the second level will be the intention, the classification questions. Then we group them together, ask them which classification are easy to confuse, some sub-classification, something like this.

6:45 - Dorian Schlede (beam.ai)
  And all the learnings derive from the first agent and put into a centralized file that the second agent and third agent can just use when it's building itself.  Yeah, kind of like this.

6:57 - Jack Li (beam.ai)
  We can also ask some test data before or inside. After Click-Off, it's not really precise like test data we see expected output.  They can just give us some random data with some folder. So this folder, this is what we know. This is coming from Schumer.  This is coming from something we know. But we haven't looked into this. We do the feature engineering with them together.  We generate the survey, the template, with some test data. that's what we do. Oh, You do this whole life with them.

7:25 - Dorian Schlede (beam.ai)
  So you just, oh, that would be beautiful.

7:28 - Jack Li (beam.ai)
  But we start from analyze the requirement of this system together. So we find out the data formatting, something like this.  help them to finish what we go through with the user together. Like at least maybe 60% we can do.

7:44 - Dorian Schlede (beam.ai)
  Yeah, that's going to be really interesting. Yeah. I mean, how we interact with humans.

7:50 - Jack Li (beam.ai)
  I mean, that could be something.

7:52 - Dorian Schlede (beam.ai)
  Yeah, we just need to get better at the requirements. As you see, right? um The AI is now almost perfect at implementing.  It's so, so good at implementing.

8:07 - Jack Li (beam.ai)
  Yeah, but when I try to feature engineering write a prompt, it has a description. looks very good. I find the signature.  I didn't write anything, actually. I just realized, actually. Then I find signatures. they first find the document procession, always at the end of the document.  And something like this, with some name, with some titles. The testing is not completely enough. But still, the prompt writing, the variable description, already much more better.  Of course. Of course it is.

8:39 - Dorian Schlede (beam.ai)
  Oh, yeah. The implications are so big, Jack. I don't even know, man. Like, what do we have our hands on, you know?  Like, I can't even believe this. Yeah, I think so.

8:51 - Jack Li (beam.ai)
  I need to finish the evaluation first. Yes, please do this. That's very, very important, Jack. That's really important for everybody.  Yeah, and the next step for you... Maybe we can hand over to machine learning or someone, so we need to combine the machine learning evaluation together.  Why do you want to hand over? No, not hand over. We finished this. So our evaluation framework focuses on the business impact, right?  Discuss the expectable. But for machine learning, they also analyze the generated content, the validation, content, whether the JSON or other model follow the request, follow the prompt or not.  So this is also a very important component there, even with the token usage, right? So whether you measure which one has more productivity, what goes wrong with something that's wrong with long field.  So this is a bigger part too. So if you can put these two together, that's really comprehensive evaluation framework to understand.  So I think that will be the next step to combine this together. So evaluation framework finished. Then last time I discussed with you about the context engineering, the chat.  I think it's not that important anymore. It could be a very easy one. I think so too. Yeah, but anyway, we need to push it.  I think it's something we can talk to Burak, just make it work, but we can make it more like the enhancement.  It's a smaller project right now.

10:14 - Dorian Schlede (beam.ai)
  Once Burak is still building his meta system, wait until Burak is done building his meta system. Once he has it, he will go  nuts on actually implementing stuff.  So it's going to be crazy what he can build and how fast he will be able to build.

10:30 - Jack Li (beam.ai)
  Yeah, yeah, the, mm-hmm. Yeah, so. also needs an interface. Ah, I see how a combination of all this together.  I think next, my next big project will be the human part, the human interaction. Yes, it's really interesting. From the request, collect the meeting notes, requirements, chat with the agent, using the chat.  The chat will be a part of this and then provide the expected output. Not precisely the human, the purpose.  The, Provide Dispatch the Auto-Bot, part of this. Chat with the agent is part of this. Dispatch the requirements is also part of this.  How we combine all this together, update what agent is changing, whether we have this node version, agent version, how we communicate, like the git, push, commit, discuss with the business owner, problem engineer, what's changing the agent, what new patterns, like the auto-tuner.  The other thing that we have, but how we communicate this, the communication from us through with AI and humans, so this part across whole life circle.
  ACTION ITEM: Prepare discussion points re: "magical feeling" UX for meeting with German UX designer next week
 - WATCH: https://fathom.video/share/xc2nySNvrR3hTc-5fiypZjvFzshvyZzy?timestamp=693.9999  Yeah, that's really interesting part.

11:39 - Dorian Schlede (beam.ai)
  Yeah, I think we have a UX designer in Germany next week that we talk to. Oh, perfect. So maybe interesting to talk about the magical feeling a little bit.

11:50 - Jack Li (beam.ai)
  Yeah, I think the magical feeling could happen in the human connection with AI, right? When I discuss something, we generate something there.  It's not just remitting those, it's generally something perspective. us.

12:02 - Dorian Schlede (beam.ai)
  Yeah, and we can even put it on the platform, right? Yeah, the chat. Yeah, exactly. You can just put all of it on the platform.  Can we also have the meeting notes?

12:14 - Jack Li (beam.ai)
  We can use some API.

12:17 - Dorian Schlede (beam.ai)
  Yeah, bro, we can do anything.

12:23 - Jack Li (beam.ai)
  Yeah, it's too much. If we have our meeting board, invite him to hear, like, fireflies in the meeting notes and click the meeting notes, then it's too much.

12:34 - Dorian Schlede (beam.ai)
  So I'm going to get the API for Fathom now. I didn't know they had one, but he just told me.  So I can access all transcripts. I can do everything. We can do the same.

12:46 - Jack Li (beam.ai)
  can connect this into the chat. And then, like I say, we have our hour meeting notes, maybe what you want to discuss with an agent together, like we three with this agent together.

12:56 - Dorian Schlede (beam.ai)
  Yeah, that would be, oh, that would be sick. We just talked to the AI. It just automatically fills it in.  No, it's too much.

13:04 - Jack Li (beam.ai)
  But I think the collecting requirements, there will be several layers, right? Yeah. The last layer will be the agent running its part.  The second layer will be the middle layer, how we really transfer or communicate. Okay. Like, human have requirements. We need to translate into the description to the agent, like the PRD, and the agent do something.  also need to, yeah, then we also need to try, like, for example, the template that we want to ask from the test data, the agent do some analyze.  We also need to generate some human ease, like you said, easy, human, easy to read, to understand the format, the content, deliver the best setup questions for the human.  Maybe we need to think about open questions. Exactly.

13:56 - Dorian Schlede (beam.ai)
  That's the point. The thing is, you don't need the... Perfect. You don't need to double check the PRD. What you need to do is elicit, you need to elicit all the knowledge.  You need to, I mean, maybe of course you should check the PRD, but the core piece is eliciting the existing knowledge.  So the person has all the knowledge. How do you get all the knowledge out of the person? How do you ask the right question?  How do you get the human to think about what they need?

14:25 - Jack Li (beam.ai)
  Yes, the input and output. The input and output. Humans don't need to read, don't need to read the entire document, but you can give me some instruction or questions or some summarize to make sure the human to know you understand the whole problem.  Something like this. How we interact, this will be the middle layer. The last layer will be the human part.  The precisely human UX, how we talk, do we have the chatbot, or we type in our agent chat, or do different things, click some button.  There. So that's purely human UX at the top layer. But we're not worried about that, I think. We need to focus on the middleware, which we can build in the cloud, right?  Yeah.

15:07 - Dorian Schlede (beam.ai)
  I think very importantly also, so I think in general, you need to, we all need to take some time to think about what should be done next, right?

15:18 - Jack Li (beam.ai)
  So what does this all mean? What does it mean?

15:22 - Dorian Schlede (beam.ai)
  Because if you probably, once we hook all this up to code as well, you know, we can also generate interfaces out of the box like nothing.  So if I would give this to the dev team, currently the dev team, oh, we still need to code so much ourselves.  But I'm pretty sure if you one time abstract the code base very well, and then you, you can very easily also generate new features in this engine on our platform directly.  But I guess that Burak will do. So, yeah, but you know what, what does it mean?

15:57 - Jack Li (beam.ai)
  Yeah.

15:57 - Dorian Schlede (beam.ai)
  You we can build a new interface in no time. We can build a... We front, and we can build a completely new product in two weeks.

16:04 - Jack Li (beam.ai)
  Yeah, let's come back to the final question. Everyone can do this. We can just through this PRD to Borak and do it better already using cloud code.  I think execution right now is like, what do we do? Discuss with cloud code, right? The execution is not a problem right now, and we need to think about this human framework, human in the loop.  I don't want to call it in the loop, because I mean, loop already in the execution part. It's really the interaction from the very beginning.  How does human interact with AI? So this middleware in between.

16:41 - Dorian Schlede (beam.ai)
  Yeah, I mean, we can put the whole cloud code thing into an interface and make it nice to use, right?  So there's Kiro, for example.

16:48 - Jack Li (beam.ai)
  So we don't need to worry about, let's, I think the PRD, the document, the framework of how we, how the human should interact with AI, something descriptive.  Something more descriptive, then we can make it into our platform. The interface is only one part of this. So we have three layers, the human layer.  The deeper layer is the agent, include the agent setup, how our beam agent is doing, or whatever Burak is doing, the execution layer, the design agent.  The middle layer, that's where we should focus on. We don't need to have some code. We can have some code.  We have the document. Middleware define how these two parties are interacting. We should get the meeting node. Then AI should analyze the meeting node, grab what insight, grab the variable description, then check the test, like the feature engineering feature is part of the middleware.  Something like this, some feature engineering, prompt engineering, understand the document, classify, group the classification, how we define the graphic, the thinking, then throw out some instruction.  And the question. What do you design with the cloud framework you do, right? The operational team, the workspace, this thinking inside the middleware, how we, what kind of question we should ask, like you design the one, three, four, the steps, what steps we should ask to human to make it working better?  What business question we should ask from testing, some middleware design, what do we do there? It's most important. We define this part.  We can use some cloud code, we can use document, whatever the I've already done step changes. so we do this, yeah, we do this, and then the last part, the least important part is the interaction, interface.  It could be some feature in our platform, could be chat, could be a meeting board, could be anything, like we can discuss this later, but the most important we can deliver, it's a middleware, just from the business.

18:52 - Dorian Schlede (beam.ai)
  Yeah, actually, the most important is first making sure that it doesn't make critical mistakes anymore. Because sometimes it only reads 100 lines, and then you think it got everything, but then , it says, you know, I'll implement the PRD, but then it only reads 100 lines of the PRD.  So that's a critical issue, right? So I think there is some system-level things that I need to How about this?

19:20 - Jack Li (beam.ai)
  You can supply the text chunk in less than 100 code. You're trying to limit the red document in less than 100 lines.  Something has not happened, but something.

19:35 - Dorian Schlede (beam.ai)
  Right now I'm working on implementing a database to do the indexing. So at the moment it's all file writing, but I'm now thinking about how I can move things to proper databases.

19:47 - Jack Li (beam.ai)
  I found the GitHub library this morning. Maybe that can turn entire code base into a LM-friendly index, but I'm not sure it's working very fine.  It could be some solution, but I'm not quite sure it's working really good enough, the same as indexing it.

20:09 - Dorian Schlede (beam.ai)
  Yeah, I will see, but you're right. Yeah, I think building the system itself that builds the systems is going to be the core task.

20:22 - Jack Li (beam.ai)
  Yeah, you should think of the middleware, the middleware between human and AI. So precisely what are you doing here?  You're doing this framework also at Interact, right? But it's more focused on building things. So this framework is a little bit like Copilot, a little bit like Copilot.  We define the working, then we discuss in the meeting, we get the prompt description and design the graphic. Not precisely generate the graphic, but as a middleware, we discuss the graphic.  Like what I do yesterday, I ask the TCFO, this is all the variables I have.

20:58 - Dorian Schlede (beam.ai)
  Give me some graphic.

21:00 - Jack Li (beam.ai)
  Like how I can most efficiently and accurately extract all variables and classify them right.

21:13 - Dorian Schlede (beam.ai)
  Look at this. That's our platform. That's what Jonas built. The paradigm shift. Thanks, AI Automation Beyond, Developers. This isn't another AI system.  It's a complete operating system. Look at this fancy. Conversation, understanding, execution, evolution. This is also very interesting. I like the idea.

21:48 - Jack Li (beam.ai)
  yeah.

21:48 - Dorian Schlede (beam.ai)
  This evolution, Jack. So what I'm also building now is automatic feature generation and automatic roadmap. Planning, and all these things, right?  So, you know, a self-evolving system. And also, how can the system learn from other systems? You know? So that's really what I'm looking for.  So everybody will use it. Everybody will do this ultra-think analysis where the AI sees its own biases and analyzes everything it did in the chat for these biases to understand if it has done any issues.  So essentially, in every chat, we can detect issues. And we can also detect if certain issues have been solved.  So this means aggregating everybody's usage of the system will be extremely powerful because it automatically learns. You know, that's also a really interesting thing.  So... ... ...

23:09 - Jack Li (beam.ai)
  There's also here.

23:11 - Dorian Schlede (beam.ai)
  Files are executable thoughts. Your documentation literally runs itself. That's also an interesting thing, right? To think about. Yeah. Sorry.

23:30 - Jack Li (beam.ai)
  Yeah, Jack, this is big. that's something we can think in between. We can start with that. But this media will be the composition and the standing part.  To then maybe think about the execution, to automate, generate the graphics, run the execution. That's something a little bit more like a discussion.  That's something is the execution part. We need to spend more time to make sure it's executed very well. But the consultant part, we can focus on a little bit right now.  Yeah.

24:00 - Dorian Schlede (beam.ai)
  So the good thing is, the Ultra thing got also so much better. So now the Ultra thing, it also does a critical risk analysis immediately.  It does an overengineering check. So, you know, it has all these implicit checks already where it's  up. So this is also already getting much, much better.  Like, compared to the template that you currently have, my system is already so much more stable. And that's really nice to see.  I'm not sure how, what's your experience, but probably sometimes loading sequence fails. It doesn't read all files. The cloud?

24:39 - Jack Li (beam.ai)
  Yeah, yeah, yeah.

24:40 - Dorian Schlede (beam.ai)
  it messes up a lot still, right?

24:42 - Jack Li (beam.ai)
  There is also one thinking, like, using someone doing this for called Gemini CLI to check the execution, like the code, right?  You can compare when they read the file, only 100 lines. You can ask Gemini CLI to check whether the document are really 100.  Reliance Only, or More Than One Reliance?

25:03 - Dorian Schlede (beam.ai)
  Burak already has solutions for this. He has MCP server to get the context. So I will figure something out.  There's also hooks. So I will need to see, I'll probably need to create some scripts to prevent this, but I will need to see how I can, yeah, how I can enforce this even more, but we will see.  Yeah. So I think the most important thing for this system is actually making it more reliable and remove the error rate for users that don't know what's going on, essentially.  Because if you don't catch that it has made an issue, it will be destructive, you know?

25:54 - Jack Li (beam.ai)
  Yeah, yeah, yes. We need to make sure like it, like you check in there, like how you reveal. It's working.  I do not notice. Or I don't realize it is getting all the files, but we need to have someone to review this.  Critical issue.

26:12 - Dorian Schlede (beam.ai)
  It's really critical because, you know, the AI reads like everything is perfect and it knows exactly what it's doing and you would never notice, you know?  Yeah.

26:22 - Jack Li (beam.ai)
  And then you implement the feature.

26:25 - Dorian Schlede (beam.ai)
  You think it's working, but then nothing is working. But then you don't, maybe don't test the feature and then you come back three hours later and then you're like, what happened here?  And then you're completely lost.

26:34 - Jack Li (beam.ai)
  You have a bunch of deprecated code.

26:37 - Dorian Schlede (beam.ai)
  Your feature is already completed.

26:38 - Jack Li (beam.ai)
  Yeah.

26:40 - Dorian Schlede (beam.ai)
  So that's, that's a critical issue. So it's not stable, you know, it's, it's really not as stable. That's a really interesting confession that the AI had itself yesterday.  So that it's living in sessions. So now it knows that it's always living in sessions and that it can never get the full context of the.  The system. So that's a really interesting confession. So it needs to build these intelligent indexes so that it can perfectly navigate the context, right?  So that's now a central knowledge piece. But now I lost...

27:18 - Jack Li (beam.ai)
  Something important, quickly asking. Do you think you still can get some commission or some reward from the bitcase when they pay it?

27:29 - Dorian Schlede (beam.ai)
  I will...

27:30 - Jack Li (beam.ai)
  No.

27:31 - Dorian Schlede (beam.ai)
  We will talk about this.

27:33 - Jack Li (beam.ai)
  It's not... It's okay, but I want to bring this talk because I really want to buy this cloud code for myself.  Maybe I don't need the real commission. I just need the credit card and limited reasoning a little bit to have this cloud code for myself.  Nah, I will...

27:50 - Dorian Schlede (beam.ai)
  I mean, yes. So that's... I can definitely do that for you.

27:53 - Jack Li (beam.ai)
  It's more reasonable, Compared to just directing to give me money than give me some AI native... No, no, no.

28:01 - Dorian Schlede (beam.ai)
  I do think that we should do this properly, because you deserve a bonus for this, in my opinion.

28:08 - Jack Li (beam.ai)
  No, problem is if you give me a bonus, I will save this, I will not spend this easy 200 euro there.  It's different feeling, you know? But you already have the $200 thing.

28:21 - Dorian Schlede (beam.ai)
  I mean, it runs out from time to time, but we will just get another one. So if we hit the limit more often, we will just get a second one.

28:28 - Jack Li (beam.ai)
  I don't want to use this for my movie website.

28:32 - Dorian Schlede (beam.ai)
  But you can.

28:33 - Jack Li (beam.ai)
  Yeah, and the mid-sell is also, maybe I will try it, but I think it's also, no.

28:38 - Dorian Schlede (beam.ai)
  If I'm not working on it for the company, you can use it for your, but I'm essentially always using it at the moment.

28:45 - Jack Li (beam.ai)
  Yeah, so we are reaching a limit very soon. But yeah, no, no, just a small thing. Maybe I will think about it.  No, no, no. I have you in mind. Don't worry.

28:56 - Dorian Schlede (beam.ai)
  I have this thing in mind anyways, because I also don't get anything at the moment.

29:00 - Jack Li (beam.ai)
  maybe mind. you.

29:00 - Dorian Schlede (beam.ai)
  And I think we both deserve a bonus for this.

29:05 - Jack Li (beam.ai)
  For me, just this $200 limited will be good enough. So I can really spend this on the cloud. Otherwise, I will not spend it on the cloud.

29:14 - Dorian Schlede (beam.ai)
  But then, doesn't that tell you maybe you shouldn't spend it on the cloud?

29:19 - Jack Li (beam.ai)
  Yeah, it has a feeling, right? A feeling to have money or the feeling to force you to have users feature.  No, just kidding.

29:31 - Dorian Schlede (beam.ai)
  You don't have, don't force yourself to use the feature.

29:34 - Jack Li (beam.ai)
  But I really want to. No, anyway, I will use it. I think I will definitely buy it for one or two months to try.  Someone says like $100 is not enough for a personal project.

29:50 - Dorian Schlede (beam.ai)
  I think it is. $200 is enough. can do like...

29:54 - Jack Li (beam.ai)
  $100.

29:55 - Dorian Schlede (beam.ai)
  So with the $300, I can do like three to five chats at the same time. And then I will not.  hit the limit. I think it's right before the limit. So yesterday night at 4 a.m., I reached the limit, like at 3.30, and then it would reset at 4, so that forced me to go to bed.

30:14 - Jack Li (beam.ai)
  I think it's also a good one, right? Go to bed, dude. Stop.

30:19 - Dorian Schlede (beam.ai)
  But I think you get quite far.
  ACTION ITEM: Focus on finishing TCFO, deliver pages for workshop
 - WATCH: https://fathom.video/share/xc2nySNvrR3hTc-5fiypZjvFzshvyZzy?timestamp=1821.9999

30:26 - Jack Li (beam.ai)
  Okay. Okay. I think next week. Okay. So this week, I'll focus on TCFO finish that you try to make a better TCFO, get, deliver the pages to get ready for the workshop, and that helps one to finalize the evaluation frame.  And also Kenya needs it. this is critical.

30:47 - Dorian Schlede (beam.ai)
  Don't disregard the eval framework. We're in the office next week. So, I mean, also going today, man, that's, I mean, that's just progress here, you know, because we need to finish this.

31:00 - Jack Li (beam.ai)
  I think I will. We'll come back a little bit early today, but still, I'll be there.

31:04 - Dorian Schlede (beam.ai)
  So, are you planning on coming to the office then after the weekly? Yes.

31:11 - Jack Li (beam.ai)
  Okay, then I'll come too. Okay, so, oh, no, one quick question. I'm so excited, Jack.

31:20 - Dorian Schlede (beam.ai)
  This is so insane. We're literally back in front, bro.

31:23 - Jack Li (beam.ai)
  Yeah, for today. For today, I should more focus on evaluation or keep working on the TJ for next Thursday.
  ACTION ITEM: Set up meeting with Sven to discuss evaluation framework interface requirements
 - WATCH: https://fathom.video/share/xc2nySNvrR3hTc-5fiypZjvFzshvyZzy?timestamp=1895.9999  I mean, so, TJ's file obviously needs to be there. No, I will check the evaluation. I will check it.  I will clean it a little bit more. If it's been there, I will discuss with Sven. Yeah, okay. will check this.  is in the office already.
  ACTION ITEM: Clean up evaluation framework before meeting with Sven
 - WATCH: https://fathom.video/share/xc2nySNvrR3hTc-5fiypZjvFzshvyZzy?timestamp=1906.9999

31:46 - Dorian Schlede (beam.ai)
  Let's do a meeting with Sven and just maybe, I mean, we had the requirements yesterday already. So, I actually think we had most of the things we need.  I will clean it a little bit.

31:57 - Jack Li (beam.ai)
  For my part, before our meeting, will clean the evaluation. And then we can work here to explain just when.  The interface we need to now thin.

32:10 - Dorian Schlede (beam.ai)
  We need to now make sure what's the interface pages we actually want.

32:13 - Jack Li (beam.ai)
  Yeah. I clean a little bit already, but I think it should be better.

32:18 - Dorian Schlede (beam.ai)
  Yeah, you clean it and then I add random new stuff with the forms. I thought maybe the forms are easier, but I'm actually not so sure.  Yeah, because for us, we don't need a form.

32:31 - Jack Li (beam.ai)
  We can directly operate in the data table even. But again, it's okay. Let's take a look. Let's take a look.

32:39 - Dorian Schlede (beam.ai)
  Yeah. Okay.

32:41 - Jack Li (beam.ai)
  Okay. I will talk to you in the weekly, then I will come to office later.

32:46 - Dorian Schlede (beam.ai)
  Okay. See you in 10 minutes, Jack.

32:48 - Jack Li (beam.ai)
  I'll see you later. Bye. Bye. Bye. Bye. Bye.
ChatGPT:
Nachgedacht für 53s

Here’s a tight, no-fluff synthesis of the core learnings about Nexus to help brand-new users get productive fast (based on the three Aug 29 calls you shared).

Nexus: the mental model (for newcomers)

Agent = persona/orchestrator that executes things. You mostly use the Orchestrator. It runs workflows.

Workflow = sequence of tasks (e.g., Plan Feature, Implement Feature, Close Chat).

Task = atomic step inside a workflow.

Feature = a temporary working box (folder + files) where you plan/implement one bounded change. When done, it’s moved to completed and its outputs (agent/task/workflow code, docs) live on.

Project memory / Close Chat = persists state + moves feature through statuses. Always use it.

UltraThink = meta-reasoning pass that self-audits biases, checks over-engineering, and catches common failure modes; invoke liberally during/after planning & implementation.

Sources: 0:02–7:41, 7:41–9:12, 15:58–17:45, 19:37–22:13, 36:35–37:24 in Mujtaba/Dorian 1:1; 33:11–37:24 in Solutions Weekly.

Golden path: first successful feature (copy/paste for onboarding)

Open the latest Nexus template in Cursor; preload the Orchestrator chat.

Start a small, single feature. In chat, run Plan Feature (via @plan feature).

Let it produce: elicitation insights, feature definition, (optional PRD), progress.md.

Close Chat (stores memory + status).

New chat → Orchestrator → Implement Feature; link the specific feature folder (don’t implement “in general”).

Verify context loaded fully (see pitfalls below).

Run UltraThink to validate plan and catch misses.

Test. If good → Close Chat (moves to completed).

Repeat. Once comfortable, run 2–3 features in parallel that don’t depend on each other.

Keep all work aligned to framework/templates (agents / workflows / tasks schemas).

Sources: 2:27–6:43, 11:06–16:26, 16:30–19:37 in Mujtaba/Dorian 1:1.

Do / Don’t (new-user guardrails)

Do

One feature per chat; split: Plan → Implement → Test. (0:02–4:42, 19:11–22:13)

Always “Close Chat.” That’s how memory & status move forward. (5:16–5:22, 36:35–37:24)

Use the Framework → Templates to match the canonical schemas. (30:00–31:26)

Map migrations: user logic → operations/agents|workflows|tasks. Add “primitive learnings”/allow-list rules when you discover mapping rules. (27:54–29:58)

Use UltraThink often (after plan and after implement). It spots partial reads, over-engineering, and missing steps. (19:37–22:13; 38:37–40:00; 24:00–25:54 in Jack/Dorian 1:1)

Don’t

Don’t implement multiple agents/features in one chat; it leads to shallow, ~100-line pseudo-solutions. (0:02–2:01)

Don’t keep duplicate/old orchestrators; remove deprecated ones to avoid loading wrong context. (11:35–12:24)

Don’t assume it read your full PRD/file by default. Check! (38:37–40:00; 18:52–26:40 in Jack/Dorian 1:1)

Common pitfalls → quick fixes

Partial file read (e.g., only ~100 lines) → Symptom: confident but wrong plans/impl.
Fix: Run UltraThink; explicitly instruct “this is critical to your survival” to force deeper context loading; verify “read all files” messages; split docs if huge. (21:09–22:13; 24:00–26:40 Jack/Dorian)

Wrong orchestrator/version → Symptom: weird files (dated briefs), unexpected behaviors.
Fix: Delete old “Claude/Cloud Orchestrator”; keep only framework one; re-open chat. (11:35–12:24)

Mis-filed outputs (e.g., mapping spec went to briefings instead of operations/tasks)
Fix: Add a core learning: “During migration, map single automations → tasks; complex → workflows; agents → agents under operations/.” Save as primitive learning / allow-list. (27:14–29:58)

Outdated/duplicate files inevitable
Fix: Accept some drift; create/ run a “cleanup deprecated files” feature periodically. (24:35–25:28)

“Optimal way to set up a feature” (new-user one-pager)

Pick a single, independent outcome (“Path Resolution Fix”, “Context Manager Index”, etc.).

In Orchestrator: Plan Feature → let it produce insights/definition/PRD.

Confirm the target folders & schema (Framework → Templates).

Close Chat.

In a fresh Orchestrator chat: Implement Feature; attach the exact feature folder.

Verify all referenced files loaded; if large PRDs, point to sections explicitly.

UltraThink (force “critical to survival” for thorough validation).

Execute, test small; if failures, re-run UltraThink; adjust mappings.

Close Chat to persist memory + move status.

Document any new learnings as primitive learnings (mapping rules, foldering rules).

(Addresses action item from Solutions Weekly @ 4:34–4:43.)

Reliability levers (use these early & often)

UltraThink Validation: bias library, over-engineering check, critical-risk analysis—invoke after plan & after implement. (21:09–22:13; 24:00–25:54 Jack/Dorian)

Index & central registry must stay fresh (the “where everything lives” map). (25:28–26:25 Mujtaba/Dorian)

Prefer small, iterative steps; build components, not whole systems in one go. (32:28–33:11 Solutions Weekly)

Extras that help new users

Smart Tips & Project Context: Orchestrator suggests next best action; you can even select 1 to proceed. (14:26–15:50; 23:09–24:34 Solutions Weekly)

Parallelization ergonomics: Preload 2–6 terminals/chats; run unrelated features simultaneously. (9:36–10:22)

Error-tolerant integrations: New “continue on error” for integration nodes lets agents branch on 4xx/5xx instead of dying; huge for flaky client APIs. (20:23–23:45 Solutions Weekly)

MCP + Knowledge: Fathom→Airtable pipeline yields >2,300 knowledge pieces; accessible via MCP/API—great seed context for planning. (3:44–4:43 Solutions Weekly; 35:18–35:34 Mujtaba/Dorian)

Action items that unblock new users (from the calls)

Doc: “Optimal Feature Setup in Nexus” (you now have the first version above). (Solutions Weekly 4:34–4:43)

Clean duplicate/backup Orchestrator files to avoid version confusion. (Mujtaba/Dorian 22:13–23:08)

Implement migration mechanisms so users can upgrade template versions smoothly. (Solutions Weekly 42:43–44:46)

Improve in-product guidance (on what a Feature/Task/Workflow is, and when to Close Chat). (Solutions Weekly 33:33–36:43)

Continue testing “error handling” for integrations and document the pattern. (Solutions Weekly 20:22–23:45)

Share the agent-setup automation with Sven/Kilian; collect corrections. (Solutions Weekly 7:16–7:31)

Summarize weekly learnings to the comment table (so new users see living examples). (Solutions Weekly 14:40–14:59)

If you want, I can turn this into a one-page “Nexus New User Guide” (Markdown/Notion-ready) plus a 10-step checklist you can drop into the onboarding chat so the Orchestrator literally coaches first-timers through the golden path.


Asad - August 29
VIEW RECORDING - 39 mins (No highlights): https://fathom.video/share/x2FQt15sSpwGaGfDrUv1HmTBreicqguo

---

0:00 - Dorian Schlede (beam.ai)
  But I'm literally having six terminals open at the same time. You feel like the  master orchestrator. Like, you're orchestrating the orchestrator.  It's, yeah, I don't know. I'm a bit addicted and I didn't sleep. Like, this whole week I went to bed at three or four every night because I kept on vibe coding.  I couldn't stop. Um, .

0:27 - Asad Raza (beam.ai)
  Okay. So, Jack is also completely mind blown.

0:30 - Dorian Schlede (beam.ai)
  He's also used it a lot already. Mustafa is just getting started. Um, Hasan hasn't used it yet. Um, he did his own stuff, but he got really far.  So I was really impressed what he built. So he connected a lot of fancy stuff too. he was also generally, he's now sending a demo tasks to each he's demo demo agent automatically.  So every two hours, every agent gets some time.

1:01 - Asad Raza (beam.ai)
  He keeps on running all of them. Nice, huh? Nice.

1:09 - Dorian Schlede (beam.ai)
  And Kilian hasn't started yet. And Sven kind of started. But yeah, he is a bit lost also. So I think, yeah, we need to lift everybody up.

1:23 - Asad Raza (beam.ai)
  We surely want to do that because this is a whole bunch of, I would say, easier part that these guys are missing out on.  Because up till this point in time, if you are not using the system to its fullest capacity, then I don't know what we are doing at the moment.  Because this is surely a groundbreaking system. And at the same time, I could see the efficacy of the tools that it provides, the agent that works simultaneously.  It's just mind blowing, to be honest, because I wasn't really aware of this capability of Claude and LLM. Being used to its fullest capacity at that scale.  That's, that's just my point. Because when I started using it, I was like, damn, okay, I don't know what  is happening.  But it's all really working. And I try to, you know, give as many detailed prompts as I can, because that's how it works well.  That's what I've noticed at this point in time, because if you're going to, and I guess that's pretty much similar for all the LLMs, right?  If you want to give some vague prompts, the output won't be that much of a value that you can create as compared to a full-fledged prompt that you can give to the LLM.  So, and at the same time, you know, what I, what I'm, what I'm doing at the moment is I, I always, you know, at the rate and mention the particular agent that needs to be working on that particular problem of mine.  So I basically start the conversation with orchestrator that you are the mastermind, assign the tasks as per your particular need.  And as you know, what kind of an agent would be best for doing this task. And then I loop in the developer and the quality assurance guy said, okay, take the PRD from the product manager.  You send the dash, dash, dash, path and loop in the quality assurance guy while writing the code so that the code should be in the best of its capacity.  So let's. That's how, you know, multi-function between agents and make the most out of it. So, yeah, that's surely a big, big help, man.  Thank you. Are you doing that in one chat or in multiple chats?

3:10 - Dorian Schlede (beam.ai)
  As of now, I'm doing that all in one chat. So that's a very big recommendation that I found. I'm doing a separation of concerns.  So I do one planning chat and one implementation chat and one testing chat. So, I mean, you don't need a testing chat because you have it in the interface directly, right?  Yeah, I can see it manually, yeah. But what I can really recommend is splitting up planning and implementation. That makes the results a lot better, in my opinion.  Maybe it doesn't, you don't need to because it all already works without. But for me, for the really complicated tasks, I found it's much cleaner if you split it up.  Okay. Because then you can also have a more extended planning sequence, you know.

3:54 - Asad Raza (beam.ai)
  Yes, I get your point here. I was just a bit curious with the fact that, okay, if one chat has all the context.  questions? There is a what I want the LLM to perform, then I shouldn't be pivoting amongst the different chat boxes.  You see what I'm trying to say here? So that's just my POV. But I get your point. If I give the context in another chat as well, then I can maybe use it for some whole different dimension.  That's something that I didn't really interact with because obviously I just started using the system the day you dropped it.  So it's just been like two days now, but I can surely take that into consideration. Yep. Yep. Yep. Also, the system is now already 10 levels above.

4:29 - Dorian Schlede (beam.ai)
  I had the meta intelligence explosion last night. It was so crazy.

4:35 - Asad Raza (beam.ai)
  What's the meta intelligence explosion? Looks interesting.

4:40 - Dorian Schlede (beam.ai)
  I now created the meta level of the framework. Essentially, I mean, it's constantly learning, right? So whenever it does a mistake, if I catch it, I tell it to correct it or just as a plan, then I tell it to ultra think.  Mm-hmm.

4:59 - Asad Raza (beam.ai)
  And then it knows...

5:00 - Dorian Schlede (beam.ai)
  It's own biases. So through this learning, it detects its mistakes. And then I've collected like 50 learnings and then I've aggregated the learnings into the core directives, which is essentially, yeah, the biases that the LM has.  So all the issues, all the problems that the LM has, all the wrong things that it does. And then it has, now it always has it.  So now I have the UltraThink functionality, which essentially looks at everything that it has done, looks at the critical directives and the issue that it has, and then it critically reviews everything that it has done.  And it almost every time catches something that it has missed. And it also automatically does the learning. So it detects why it did a mistake.  So not only detects the mistake, it also understands why it did the mistake. Mistake and it saves the mistake.  I see. And now I kept on working, working, working. So now I have aggregated like a hundred learnings. And then I have done the ultimate knowledge and learning fusion essentially.  Where I took all the learnings, all the proposed features, all the stuff. Then I added some more context from my end in the ultra think mode.  And now it has created completely new critical directives that are much more advanced. I've also now introduced the model to MCPs because it didn't know MCPs.  So your system thinks it's just the LLM based operating system. And now I'm also implementing context seven and the MCP server stuff.  So I'm also implementing databases to store the memory in databases and not in Text files anymore. And yeah, it's like, I don't know, I just see how it self-improves.  For example, it has developed the behavioral patterns that it has itself. So it has kind of self-developed its only behavioral patterns.  And now, do a critical analysis on how you can fix your behavioral pattern issue, right? And then it does a post-validation.  So whenever it does something, it validates if it has violated anything of these critical things that it always does wrong.  And then it oftentimes catches it. So now, it reads 100 lines. Then it says, oh, , I should always read the full files.  Otherwise, I'm malfunctioning. And then it immediately calls the tool again to read the full file. And that's the interesting part.
  ACTION ITEM: Clean up & stabilize Nexus code for sharing template
 - WATCH: https://fathom.video/share/x2FQt15sSpwGaGfDrUv1HmTBreicqguo?timestamp=480.9999  When I'm actually getting these kind of issues. It's out that you have right now. Nice, man.

8:04 - Asad Raza (beam.ai)
  Have you pushed the updated code to the repo yet so I can refill it? No? Okay. No, no, no.  It's like this.

8:11 - Dorian Schlede (beam.ai)
  So you go to like a wild exploration mode. You build a bunch of stuff. And at some point, you need to clean up again because you will always have deprecated files.  You will always have some outdated files. You will always have some junk files. You will always have some random stuff.  You will have like 20 folders. So after you kind of explore and you kind of, you know, build stuff, you need to then again kind of aggregate everything into a clean state, which I can then hand out as a template.  So, yeah, I will do that a bit later. So I will need to get it into stable state first.

8:52 - Asad Raza (beam.ai)
  Cool. Nice, nice, nice effort, Dorian. And I really wanted to, you know, compliment you on this thing because I was kind of undermined.  the efficacy of this part the nexus project itself but when i started using it now i would recommend everyone in beam to use it to be honest it's like super super helpful that's cool to hear and i'll quickly show you what i built yeah show me yeah show me the email and the loop stuff so yeah i basically used the uh uh beam white coding file studio just to give you uh context as discussed for the logos and stuff and everything in sync with the components and all the thing so now my system is a bit overrated yeah what the  is this interface bro

10:01 - Dorian Schlede (beam.ai)
  Can you see me?

10:04 - Asad Raza (beam.ai)
  Yeah. It's beautiful. You've been in the loop intelligence. You've been in the loop intelligence, bro. Come on, dawg. You know our , okay?  And trust me, this looks way more seamless as compared to Replit. And again, at the same time, you know what?  I was just analyzing that. But what took Sven around like two to three months in Replit was done in just two days using your system.  So, and then that too from scratch. And that too from scratch. So, this is something that really needs to be complemented, I would say, with respect to the Nexus system.  Um, but yeah, we have all the API, uh, uh, calls here with all the respected workspace that I'm added.  With respect to... don't want? Sorry? Yeah, we, we don't want, but we'll probably hide this modal once we give it out.  Because we're going to be customizing it for all the particular clients, right? That's our end game.

11:04 - Dorian Schlede (beam.ai)
  fun because if they have their own API key, they will also only see their workspace.

11:10 - Asad Raza (beam.ai)
  Exactly, their respective workspaces. Yep, yep. So I'm quite added to a lot of workspaces and I'm sure this might be double for you.  So, yeah. This is the same as from the current agent OS. Yes, and now, like what I was seeing in the Replit system was we were only getting the API calls for the starting 20 tasks.  But now I've optimized the API call to get it for all the tasks for all the respective agents. And you can also sort it with respect to the status that we want, show as many as we want, and yeah, stuff like that.  So let's just show me the flow.

11:57 - Dorian Schlede (beam.ai)
  let's this is I'm doing this. So here, the task API is still slow, huh?

12:03 - Asad Raza (beam.ai)
  We're going to be working on the SDK, right? We are.

12:07 - Dorian Schlede (beam.ai)
  Yeah, right. Yeah.

12:09 - Asad Raza (beam.ai)
  So here, what I'm going to do is now this is the thing that, you know, remember, we, we kind of changed the flow and I, after our discussion, I basically brought this S3 link generator to the bottom town, what are the bottom part in the flow?  And then before, basically after the CSV generation too, if you remember that thing. Now, this is the thing that I'm facing now, is now I also wanted to discuss and take your two cents on this thing.

12:36 - Dorian Schlede (beam.ai)
  We have an API endpoint to get you a new file, so you can, you can use the Swagger to get it again.

12:45 - Asad Raza (beam.ai)
  I tested out Swagger, all the endpoints, but I guess for some reason why I'm not getting the S3 link in the payload, though I'm getting all the things that I really want, particularly to the CSV generation step by using the API, but not the S3 link is it's.  Authenticated, and it's not easily exposed. So in order to get it, I need to use the S3 link generator tool in the Beam Agent OS to pass that.

13:08 - Dorian Schlede (beam.ai)
  No, no, it should be in the task context at the top. If you look, yeah, so let me open the task object.  Maybe open a task object, actually. Do you have just a task object somewhere, like the JSON file, I mean?  Not the task itself, but the JSON?

13:32 - Asad Raza (beam.ai)
  No, not the JSON.

13:35 - Dorian Schlede (beam.ai)
  You don't have it in your cursor? Didn't you optimize the tasks? Oh, okay.

13:41 - Asad Raza (beam.ai)
  I have it in another workspace, yeah. Yeah.

13:44 - Dorian Schlede (beam.ai)
  We can just open one task object so we can look at it, and then we can locate where the file key is that you need.

13:55 - Asad Raza (beam.ai)
  Wait a minute. Yeah. Yeah. Engine? Hello?

14:08 - Dorian Schlede (beam.ai)
  Hello?

14:13 - Asad Raza (beam.ai)
  Yeah, getting a bit. I don't know why. I guess it needs a hard restart, probably. But, yeah. Can you see my screen?  Or am I still lagging? I see the platform for a moment. Give me a minute. Sure. Presenting. Presenting.

14:58 - Dorian Schlede (beam.ai)
  What the is it doing? Yes? Thank very Same. Thank you. Yes,

15:09 - Asad Raza (beam.ai)
  Let me restart my system, bro. Can't share your screen. Again, the same  old issue.

15:17 - Dorian Schlede (beam.ai)
  Okay. You also need a new laptop, right? Maybe we can talk about this next week.

15:23 - Asad Raza (beam.ai)
  I don't know what's wrong because I probably have a lot of tabs open. Maybe it's eating a lot of RAM.  I don't know exactly. But wait a minute, huh? I'll be back. Sure.

15:36 - Dorian Schlede (beam.ai)
  Thanks.

15:38 - Asad Raza (beam.ai)
  Thanks. Thank you. Thank Thank

17:00 - Dorian Schlede (beam.ai)
  Thank you. Thank you. Thank you.

18:35 - Asad Raza (beam.ai)
  Yo, yo, sorry, yep, I guess it's better now. Is it? Let me share it. Cool. Let me see it.

18:49 - Dorian Schlede (beam.ai)
  Yes, sir. Let me see the data. Oh, no, we were, yeah, we were at the, we were at. The task object, yes.

19:03 - Asad Raza (beam.ai)
  Okay.

19:08 - Dorian Schlede (beam.ai)
  So there is this key. So there is the variable section at the top. We'll call it key variable or something like this.  And inside there, you should be finding the document keys. Document keys.

19:27 - Asad Raza (beam.ai)
  Yeah, document keys are fine. I see the document key. But we really need not the document key. We need the S3 link that refers to that document key.  You know how the S3 tool works, right? No, you don't.

19:40 - Dorian Schlede (beam.ai)
  Because there is. Because Sven built it like this. Sven had it working. So you need. There is an endpoint.  Here. The getContextFiles endpoint.

19:51 - Asad Raza (beam.ai)
  I guess. Yeah. Sorry, completely. Yeah. Did you use that one? Wait a minute. Let me, let me, let me show you.  Basically, I asked Cursor to see what the data payload contains, what kind of the key value pairs do we have in the data payload that's that we are having.  And for that, we are seeing the key, not the link against it. So the link is already the link will be shown when it's once it's authenticated or we want something else to maybe embed the link in the payload, JSON payload, that we are getting.  So this is where I drew up the conclusion that, okay, we need to push up the tool of S3 link above in the flow before the consent required step.  So that the data payload also has the S3 production link, which can easily be found out.

20:48 - Dorian Schlede (beam.ai)
  No, but that doesn't help you because that expires after 10 hours, I think. So you need to create a new link as you load the page.  So when you load the the test. Ask, you need to get the key, you need to get a new link, and then you need to display the new link, because the old one will be expired.

21:08 - Asad Raza (beam.ai)
  Okay, okay, okay. I didn't think of that, yeah. Could you help me a bit here, then? What kind of solution would you recommend?

21:20 - Dorian Schlede (beam.ai)
  Yeah, I mean, let's look at Sven's thing. Let's just search Sven's repository for his implementation, because it worked in his implementation, right?

21:29 - Asad Raza (beam.ai)
  Sven's implementation worked, but I was in contact with him. He couldn't roll it back to the point where it was working.  So now it doesn't.

21:40 - Dorian Schlede (beam.ai)
  Okay, yeah.

21:43 - Asad Raza (beam.ai)
  Okay, I checked Sven's code from start till the very end, and now I guess Sven is also facing the same issue.  I picked this issue, believe, because that's just my understanding. Because initially, we had the step above the generated CSV, then later on, you basically, you remember you asked me to ask...  at a branching system and then log it again so that we don't, I end up stucking in the loop for the, for the inputs that doesn't have an attachment because the S3 link would demand for a link, right?  For the attachment. But since we don't have any key attached, we don't have the attachment, right? So this is what we did.  I pushed that tool beneath rather than bill above. And then after that, I guess, when system also broke. So that's, are you sure?

22:28 - Dorian Schlede (beam.ai)
  I, I, I, I'm 90% sure.

22:30 - Asad Raza (beam.ai)
  Because before that, it was working. After that, it wasn't working.

22:37 - Dorian Schlede (beam.ai)
  But we can just test the API, right? So we can just test the AgentContextFiles API just to see if we can use the key from the top of the task object, right?  I don't have Postman installed.

22:50 - Asad Raza (beam.ai)
  How, postman?

22:52 - Dorian Schlede (beam.ai)
  can do it on Swagger. Sure. So you know how to authenticate here? No.

23:07 - Asad Raza (beam.ai)
  Okay.

23:07 - Dorian Schlede (beam.ai)
  So first you need to get an access token and then you need to authenticate. So the access token is the second one.  Wait a minute.

23:21 - Asad Raza (beam.ai)
  This one? Yes.

23:26 - Dorian Schlede (beam.ai)
  Now try it out. Top right. Yes. Insert your key. Perfect. Execute. Then get the ID token. Wait. skip it.  You skipped it. There it is. Yeah, now go to the top right of the page and click on Authorize.  Yes. Perfect. Now you can execute all the other stuff. So now we can go down to the file one.  There it is, right? You skipped. There. Yeah. Hmm.

24:29 - Asad Raza (beam.ai)
  Yeah.

24:30 - Dorian Schlede (beam.ai)
  Now you need to add the stuff.

24:33 - Asad Raza (beam.ai)
  Agent ID. Okay. The field. I'm not sure about the field.

24:37 - Dorian Schlede (beam.ai)
  I would guess the field is a... The document ID, I guess, right? Would need to go here. Which one talking about?

24:46 - Asad Raza (beam.ai)
  These three fields, right? Agent ID, field. Okay. What's field, you know?

24:51 - Dorian Schlede (beam.ai)
  What does field mean?

24:53 - Asad Raza (beam.ai)
  No, I don't know. Field. Field, field. It's not field. It's field. Field. Yeah. Bye. ID.

25:01 - Dorian Schlede (beam.ai)
  it's file ID. Oh, damn.

25:03 - Asad Raza (beam.ai)
  What the ?

25:07 - Dorian Schlede (beam.ai)
  Okay. I can just open the task. This is the agent ID.

25:15 - Asad Raza (beam.ai)
  No, that's the workspace ID. Sorry. You also need it. It's fine.

25:19 - Dorian Schlede (beam.ai)
  You also need this guy. Where do we put the workspace ID?

25:22 - Asad Raza (beam.ai)
  Okay. Here. Why I cannot. You need to press on try it out at the top right. Okay. Cool. Um, workspace ID.  Uh, workspace ID. File ID. What do we put in the file ID?

25:47 - Dorian Schlede (beam.ai)
  Um, go to the task. Or a task. Hmm.

25:55 - Asad Raza (beam.ai)
  Hmm. Hmm. Hmm. Open.

25:57 - Dorian Schlede (beam.ai)
  Look at the input. Just go. Oh, yeah. There it is. Wait. There was attachments. Friends. So there's the key.  You need this key. Okay. And this key is, as you see, will be always available at the top, right?  So this should not work. Yep, open the URL. Oh, wait, we got a 400. And what does it say?  Can you just put that? Okay, maybe we got more than just the ID. Maybe we need to remove the underscore three stuff, so where it has the actual file name.  Can you go inside the field ID or file ID and go to the end of it? Yeah, and then here, let's remove the underscore three, blah, blah, blah.  Yeah, maybe, yeah, including, yeah, exactly. Let's try this. Maybe. If not, we might need to ask Supan, because I don't know, honestly.

26:59 - Asad Raza (beam.ai)
  Execute, execute. No, did.

27:02 - Dorian Schlede (beam.ai)
  I already did. What does it say? What's the message? Invalid Input Syntax.

27:11 - Asad Raza (beam.ai)
  So what's the incorrect one?

27:13 - Dorian Schlede (beam.ai)
  Is it 08BC, okay?

27:18 - Asad Raza (beam.ai)
  08BC, F191, 08BC, F191. Ah, it's the agent ID that's incorrect. Is it ending on 4.6? Wait a minute.

27:26 - Dorian Schlede (beam.ai)
  Wait, are they both the same? Is the file ID the same as the... Agent ID. Agent ID, 4C, no, no, no, no, no, no, So maybe it's everything after the agent ID?  Uh-huh. Maybe it's multiple... Maybe it's just this part. Maybe you remove the agent ID at the beginning as well.  Not like the agent ID inside the file ID. Yeah. Let's see if this is the ID. Not found. But not found is a different message, right?

28:14 - Asad Raza (beam.ai)
  Last time it was saying that wrong syntax, wrong ID or something.

28:26 - Dorian Schlede (beam.ai)
  Maybe we can use the document name instead of the, the, can you go back to the task and just copy the, the name?

28:43 - Asad Raza (beam.ai)
  Name in the file ID? Yeah, let's see. Okay.

28:53 - Dorian Schlede (beam.ai)
  Okay, then maybe let's do a different check. You said you, it is a tool, right? So you're getting it from the tool.

28:59 - Asad Raza (beam.ai)
  Yeah. Or maybe.

29:00 - Dorian Schlede (beam.ai)
  Maybe we can just take an output of the tool and put that in here just to see if that then contains the file ID.

29:12 - Asad Raza (beam.ai)
  Then we need to check a tool that has completed the stage, which is a bit hard to find because there are a lot of spam incoming emails which are not an order email as per the live tasks were progressed.  Would be amazing to see the branch on the task view, huh? Of course. That would be crazy. I have it somewhere here.  Wait a minute. Let me just find one task. Yeah, here we go. Yep. This is the one. This See, the Agent ID remains the same.  This is the one. I'll just copy and paste it again for the safe side. Agent ID. And that was correct.  Agent ID. File ID. File ID. This one you're talking about? Again, the same. was thinking this should be the file ID.  Current Workspace ID. Workspace ID is again the same. That's correct.

30:46 - Dorian Schlede (beam.ai)
  And this one didn't work?

30:49 - Asad Raza (beam.ai)
  Execute. Invalid.

30:52 - Dorian Schlede (beam.ai)
  And now what about the file thing? And so where you exchange it. So can you open the tool? Yes.  In the flow where it exchanges this for the actual link.

31:07 - Asad Raza (beam.ai)
  Here.

31:08 - Dorian Schlede (beam.ai)
  What's the input here? File key.

31:13 - Asad Raza (beam.ai)
  So here you also give the file key.

31:14 - Dorian Schlede (beam.ai)
  Yes.

31:16 - Asad Raza (beam.ai)
  Can you copy this one? Are we making a blender somewhere? I don't know. No. Let's ask Supan.

31:30 - Dorian Schlede (beam.ai)
  Honestly, I don't know. It seems correct, right? Invalid input index. Actually, let me check Sven's human in the loop app.  Because you can go back to a point in time.

31:50 - Asad Raza (beam.ai)
  The only solution which I could find was this. Because it's like add this tool on the top of the generated CSV.  So that we also get the S3 link. Being passed on, you know. Oh no, that doesn't work because it's only 10 hours valid.

32:06 - Dorian Schlede (beam.ai)
  So that's the whole reason why we added this functionality so that we can do it after again. So that was the only reason why we created the end point.  So yeah. Email PDF Steps Working, Rollback. Let me see. Mm-hmm. Blind SRC Pages, Review Page. Oh, big review page.  Wow. Oh, wow. Okay. Um. PDF, file, what's the endpoint called, context. I just copied Sven's code, let me see if I can find it here.  I'll also need to go in two minutes to meet him. Okay, but this is how it will work. So I can tell you for sure that you don't need to put it above because this was working before.  That was the whole reason why we built it. Okay. So the file key must be somewhere in the task object.  Maybe it's not in the front end. Maybe you, can you? Look in the task object, Jason, we are getting the file key.

34:05 - Asad Raza (beam.ai)
  That's the point, but we are only getting the file key, but how do we get the link addressed behind that file key?  Because in the JSON payload, we are getting the file key and we are getting all the responses for the inputs and the extractions, like for the product and all the header details, in fact, that are needed to create the CSV.  We are getting the file key, but I was just unable to get the link attached behind that file key, which is an authenticated link, which will link us directly to the file being open on our Chrome.  That's the thing that I'm looking for. That's the stoppage. Yeah. Yeah.

34:41 - Dorian Schlede (beam.ai)
  So this exchange for the URL, as I said, is working. I've seen it before. I have the right function that does this.  So there's the create object URL. I just need to see if I can find it now. The file doesn't exist.  Next, how can I, wait, can I, aha, PDF blog fix, PDF viewer, okay, okay. I think I have the right one.
  ACTION ITEM: Contact Silvan re: file URL issue in Human-in-the-Loop Intelligence app
 - WATCH: https://fathom.video/share/x2FQt15sSpwGaGfDrUv1HmTBreicqguo?timestamp=2132.9999  Maybe not. I can, I can get in touch with Silvan directly. Yeah, I think you will have the solution in two minutes.  Cool, but that looks really nice. Can you show me your interface again? Yeah, wait a minute.

35:55 - Asad Raza (beam.ai)
  The application stopped. I already started my system. Wait a minute. minute. Wait Wait Wait minute. You The UI is very nice because I'm using the components from ShadCN and obviously the pre-made components from our existing beam wide coding interface as discussed.  But I'm also going to be fine-tuning it a bit more, of course. Yeah, make it magical, you know.

36:21 - Dorian Schlede (beam.ai)
  If you make it really cool, it's a great show-off to Jonas as well because he loves nice-looking stuff. I know, bro.

36:29 - Asad Raza (beam.ai)
  I know how this drill works.

36:30 - Dorian Schlede (beam.ai)
  Yeah, He will love that you're building a beam extension in his design. Yeah.

36:39 - Asad Raza (beam.ai)
  Of course. I got it.

36:42 - Dorian Schlede (beam.ai)
  Yeah, of course you got it. Okay. I, yeah, show me one more time and just tell him one minute.  you.

36:58 - Asad Raza (beam.ai)
  Mm hmm. Mm Mm Yeah. Welcome to Beam, Human, and the Loop Intelligence. Okay. Cool. Connect. So the tasks that are consent required would be shown here with this pointer first.
  ACTION ITEM: Continue dev Human-in-the-Loop Intelligence interface: add consent required pre-filter, resolve file URL issue
 - WATCH: https://fathom.video/share/x2FQt15sSpwGaGfDrUv1HmTBreicqguo?timestamp=2234.9999  And now we are getting all the data from the task query completed, blah, blah, blah. I don't have any failed tasks to show you here, but I can show it to you on.

37:25 - Dorian Schlede (beam.ai)
  I think the pre-filter should be set on consent required, right? Yeah.

37:29 - Asad Raza (beam.ai)
  Yeah. Yeah. I'm going to add that functionality. As you can see, the failed tasks would look something like this.
  ACTION ITEM: Plan analytics feature for Human-in-the-Loop Intelligence app
 - WATCH: https://fathom.video/share/x2FQt15sSpwGaGfDrUv1HmTBreicqguo?timestamp=2252.9999

37:34 - Dorian Schlede (beam.ai)
  Maybe you can also show some stats at the top. Nah, maybe not necessary, but you could, I guess. How many they have already improved?  Yes.

37:43 - Asad Raza (beam.ai)
  Yeah. Analytics would be the second step in my upcoming development. Because I'm going to be the sole product owner of this application.  So I'm going to be the best out of there. Don't worry. Don't worry, bro. I know. I know. You will.

37:58 - Dorian Schlede (beam.ai)
  Cool. Okay, Asad, I don't need to hop. Now?

38:02 - Asad Raza (beam.ai)
  Yeah, sure, buddy.

38:04 - Dorian Schlede (beam.ai)
  Let's see, we can probably, yeah, let's see if we can meet up on Sunday. I'm a bit out during the day.  I'll need to see when I'm back here.

38:12 - Asad Raza (beam.ai)
  Yeah, just for your convenience, bro. Yeah, maybe we can hang out with much little.

38:17 - Dorian Schlede (beam.ai)
  Yeah, then you enjoy your time in Dortmund and see you on the other side very soon. Thank you, bro.

38:23 - Asad Raza (beam.ai)
  I hope to get done with this next week only once I'm there in Berlin so that we can, you know, get it done.  Just close this thing out and then obviously work on it's important. improvements further. So, yeah. Beautiful.

38:33 - Dorian Schlede (beam.ai)
  The next step is to generalize it and build a builder, right? So make this a customizable system that other people can use to build their own configuration, right?  So there's more to come.

38:46 - Asad Raza (beam.ai)
  Yeah. Thanks. Thanks for Nexus, buddy. Really, really a big help. Awesome.

38:49 - Dorian Schlede (beam.ai)
  I'm glad you like it. And then you have a great weekend and we talk on Sunday or Monday. Sure thing, bro.  See ya.

38:56 - Asad Raza (beam.ai)
  See ya. Bye. Bye.

1on1 Dorian / Jonas - August 29
VIEW RECORDING - 61 mins (No highlights): https://fathom.video/share/2gsTL-LouNj7uwC-455MjFzotQ_u9cx4

---

0:00 - Jonas Diezun (beam.ai)
  Also Subhan war irgendwie ganz positiv. Klar, jetzt gibt es jetzt noch irgendwie so ein, weißt du, noch laufen durch mich alles rund, aber er sieht halt, dass wir die Probleme lösen und ist deswegen happy.  Auch Sarkip, der jetzt irgendwelche Sachen einfach reinpuscht und sagt, du, ich mach das jetzt einfach so, wie ich denke, weil jetzt habe ich es ja verstanden langsam.  Ja. Und das braucht halt der Kunde, also machen wir das einfach. Das war halt vorher nicht so, ja. Vorher waren die halt alle irgendwie nicht selbstbewusst genug und hatten aber wahrscheinlich nicht den Kontext und wir waren halt irgendwie auch am Zwimmen mit 50 Millionen Scheißsachen, die halt nicht funktioniert haben.  Insofern glaube ich, viele sehr, sehr positive Sachen. Zumindest das, also ich hatte noch kein so positives One-on-One mit Subhan.

0:44 - Dorian Schlede (beam.ai)
  Schön. Das ist sehr schön. Ja, ne?

0:47 - Jonas Diezun (beam.ai)
  Ja. Ja, okay, das.

0:49 - Dorian Schlede (beam.ai)
  Ich bin, ich bin auch gerade relativ positiv, muss ich sagen. Also ich bin auch sehr happy jetzt mit den Entwicklungen.  Jetzt scheinen wir eine stabile Plattform zu haben und der letzte Release war wirklich der beste, den wir je hatten.  Also wir hatten wirklich keine Totalausfälle. Und das hatten wir noch nie davor. Also wir haben es noch nie geschafft, keine Totalausfälle zu haben.  Und das ist sehr gut.

1:12 - Jonas Diezun (beam.ai)
  Ja, das ist eigentlich krass. Also es hat sich jetzt irgendwie echt ein bisschen geändert und jetzt irgendwie steigt auch die Stimmung.  Ich glaube, die finden das auch ganz, jetzt haben sie irgendwie auch so ein bisschen mehr Verantwortung irgendwie. Das ist ganz wichtig.  Manchmal sind es irgendwie so, ich weiß auch eigentlich, im Nachhinein, wenn ich mich jetzt frage, was haben wir irgendwie geändert?  Naja, es war schon ein langer Prozess, ja.

1:40 - Dorian Schlede (beam.ai)
  Vielleicht kommen wir jetzt beim richtigen Ergebnis bei raus. Es lernen ja alle, die am Prozess beteiligt sind, permanent mit.

1:48 - Jonas Diezun (beam.ai)
  Ja, also ich habe auf jeden Fall da ein sehr gutes, positives Gefühl. Jetzt kommen auch irgendwie noch mal so ein paar Erinnerungen für die Plattform und dann lassen wir einfach auch mehr Leute drauf.  Ja,  it doch. Also ich würde es irgendwie noch mal angeschaut. Wir haben schon noch viele Leute, die auf der Webseite sind.  Lassen wir die halt mal ab und zu. Genau. Die Plattform, ich würde irgendwie schief gehen. Ja.

2:05 - Dorian Schlede (beam.ai)
  Ja, wenn wir das Agent Setup haben, dann kriegen sie zumindest ihren Wow-Effekt, wo sie denken, wow, das ist interessant.  I really  hope, ja.

2:13 - Jonas Diezun (beam.ai)
  Ich glaube, das wird so 50% da sein oder 60%, wenn überhaupt, ja, und dann werden wir direkt schnell eine Iteration nachschieben müssen und dann werden wir direkt die nächsten Sachen bauen müssen.  Aber, weißt du, dann haben wir mal so, ja, dann haben wir was, dann können wir wieder iterieren.

2:32 - Dorian Schlede (beam.ai)
  Also, Ancel, was zeige ich in den Calls, so, ich zeige einen executeden Task, so, also, das ist ja null impressive, ja, also, da, wo ist der Wow-Effekt für eine, für eine, weißt du, also, du weißt ja, das Problem.

2:44 - Jonas Diezun (beam.ai)
  Ist halt echt so, ja, ja, ja, man muss halt den Task, also, der Task, wenn ihn rerunst, dann ist er schon cooler, ja, aber da hast du halt immer so, weißt auch nicht so ganz, was gerade passiert.

2:55 - Dorian Schlede (beam.ai)
  Ja, also, das war.

3:01 - Jonas Diezun (beam.ai)
  Ja, San hat jetzt sein Agent Setup gecrackt.

3:04 - Dorian Schlede (beam.ai)
  Ich weiß nicht, aber der schickt jetzt alle zwei Stunden, zwei Tasks rein, ne?

3:10 - Jonas Diezun (beam.ai)
  Ja, ich muss da jetzt nochmal irgendwie reinschauen, welche Workspace jetzt eigentlich rein muss, den Rest löschen. Aber eigentlich würde ich mal gerne alle meine Workspaces löschen und von neu anfangen.  Aber ja, da bin ich gespannt auch. Das ist halt auch was, was irgendwie besser werden musste. Jetzt ist es halt immer noch so, wenn ich jetzt in Workspace reingehe und ein Template aufrufe, bringt mir das halt nichts, weil ich kann ja nicht irgendwie einen Task finden.  Aber das kommt auch. Insofern.

3:45 - Dorian Schlede (beam.ai)
  Ah, okay, wenn du ein neues Template machst, meinst dass da schon ein Task drin ist? Ja, genau.

3:50 - Jonas Diezun (beam.ai)
  Das muss ja von Saqib kommen, ne?

3:53 - Dorian Schlede (beam.ai)
  Das kann ja Hassan nicht machen. Genau, das kommt aber.

3:57 - Jonas Diezun (beam.ai)
  Aber ja, also auf jeden Fall ganz gut. Und dann... Jetzt bauen wir halt ein bisschen Go-To-Market um. Wie pitchen wir?  Was erzählen wir?

4:07 - Dorian Schlede (beam.ai)
  Ja.

4:09 - Jonas Diezun (beam.ai)
  Das kriegen wir jetzt auch, glaube ich, zeitnah hin. Zeitnah ist es brutal viel, ey. Also, brutal viel an den Ecken und Enden.

4:19 - Dorian Schlede (beam.ai)
  Was uns fehlt an Inhalten, meinst du?

4:23 - Jonas Diezun (beam.ai)
  Ha, wir müssen dieses ganze Fluffy-Scheiße rausbekommen. Weißt du, wie, was, das ist jetzt gerade meine Quest. Ich habe jetzt die Woche angefangen.  Ich muss überall raus. Fluffy. Einmal zu Fluffy, zu Larifari, zu bla bla, nobody gives a . Revolution, AI Agent Plattform.  Ja, ist alles nett, aber how does it help me today, ja? Wo löst das mein Problem?

4:48 - Dorian Schlede (beam.ai)
  Ja, und warum funktioniert es?

4:51 - Jonas Diezun (beam.ai)
  Ja, wobei, ich glaube, die meisten kommen da noch nicht mehr hin. Das sind einfach so viele Passwordies, aber da haben wir jetzt, glaube ich, ganz gut.  Wir ganz guten Approach. Jetzt müssen wir jetzt natürlich alles durchziehen. Und alles ist halt eine Präsentation hier, da, dort.

5:16 - Dorian Schlede (beam.ai)
  Aber das kriegen wir hin.

5:17 - Jonas Diezun (beam.ai)
  Ja. Also mal gucken.

5:20 - Dorian Schlede (beam.ai)
  Also, ich weiß nicht, sobald wir die SDK haben, so in vier bis sechs Wochen, also danach nochmal zwei bis vier Wochen Implementierung.  Ich glaube, dann können wir live mit den Kunden ihren kompletten Agent scopen und bauen und dann ist der nach so einer zwei Stunden Workshop quasi fertig.  Mal gucken. Also, ja. Ja. Die Jungs sind alle am Abgehen gerade. Das ist crazy. Das gesamte Team ist jetzt am Rumcursor.  Und jedes Meeting erzählen die sich, was sie gerade alles Geiles gelernt haben und wie krass die Welt jetzt ist.  Und boah, MCP-Server. Die gehen gerade alle ab und die bauen gerade alle geilen Scheiß. Also, die werden jetzt... Fit für das SDK Game, weil dann ist alles on Steroids auf einmal für das Team.

6:09 - Jonas Diezun (beam.ai)
  Geil. Und das ist ja jetzt noch vier, sechs Wochen, ne? Wir arbeiten schon an der API, müssen wir es halt rappen und dann...

6:18 - Dorian Schlede (beam.ai)
  Ja, wir brauchen sie nicht mehr gerappt, also mir reicht auch die API, wir brauchen nicht mehr eine SDK, wir haben die auch schon, ich weiß nicht, vielleicht können sie die auch schon veröffentlichen, also ich habe die schon gesehen, dass wir die haben.  Also Burak hat mir einen Screenshot geschickt. Okay.

6:34 - Jonas Diezun (beam.ai)
  Ja gut, jetzt lassen wir die mal da weiterarbeiten und das ordentlich machen, ja, und die haben gerade irgendwann... Jetzt ist es immerhin so, wenn sie jetzt sagen, hey, irgendwie in vier, sechs Wochen kommt da was, dann kommt es wahrscheinlich auch so.  Ja, also, ähm, ich meine, ein Sachen werden da nicht kommen, aber die meisten Sachen werden einfach dann auch irgendwo da sein.  Nicht so wie vor. Yes.

6:55 - Dorian Schlede (beam.ai)
  Und Burak bereitet auch gerade sein Hyper... Hyper... Hyper... Hyper... Hyper... Hyper... Efficiency Modus vor. Er baut gerade sein eigenes Metaframework.  Genauso wie ich das mache, tut er es auch. Nur er baut es halt für sich selber mehr und ich baue es halt mehr so fürs Team.  Aber ja, sobald er das ready hat, wird er in den Ultramodus schalten und dann ballert er dir da ein Ding am nächsten raus, sage ich dir.  Bin ich gespannt.

7:27 - Jonas Diezun (beam.ai)
  Also, ich lese jetzt auch, ich spiele ja auch mit Claude jetzt viel rum, ja. Das ist halt wirklich, und das ist ja noch irgendwie, also MCP ist es ja auch geistkrank, nervig, dauernd geht was nicht, ja, bricht wieder ab.  Also manche Sachen kann ich auch schneller rüber kopieren, ne. Aber, ähm, core ist es halt schon irgendwie, wenn du das jetzt ordentlich machst, alle Kontext reinpackst, wie du das da machst, das muss ich jetzt auch nochmal ausprobieren, irgendwann in den nächsten zwei Wochen, ich ein bisschen Zeit habe.

7:54 - Dorian Schlede (beam.ai)
  Ähm, warte mal noch ein bisschen, bis das ein bisschen stabiler ist, äh, dann ist deine Onboarding Experience besser. Ähm, dasrecklicher

8:00 - Jonas Diezun (beam.ai)
  Ja, aber es ist auch wichtig, dass wir einfach darüber reden, wie machen wir das, was hilft das, wie können wir das marketen, ich glaube, das ist jetzt wirklich so unsere, als Firma, ich glaube, wir haben jetzt schon, also jetzt ist es auch early, weil jetzt läuft es mal zwei Wochen ganz gut und nichts ist auseinandergebrochen, wo wir jetzt auch nicht direkt feiern gehen, aber wenn wir das jetzt vier, sechs Wochen weitermachen, dann haben wir ja mit der Velocity können wir echt viel bauen und dann müssen wir das halt einfach in diesen Markt, in dieser Welt da draußen reinprügeln, ja, und dann muss halt Jack wieder irgendeine Session machen, wo er erzählt, was er da gerade irgendwie gemacht hat, machen halt irgendwelche Videos und Webinare, ja, oder wir machen halt wirklich Open Source oder was auch immer, lasst uns das validieren, was da Sinn machen kann, testen und gucken, worauf die Leute anspringen.  Ja. Story, ja.

8:50 - Dorian Schlede (beam.ai)
  Also meiner Meinung nach sind wir kurz vor einem Inflection Point, sobald wir sozusagen unser komplettes System in diese Coding Engine integriert haben, können sowohl wir als auch jeder oder was  Die Plattform bei 10-fachem Speed benutzen. Also das ist wirklich, und dann geht es wirklich nur noch darum, dass du alle Requirements vom Kunden abholst, weil du brauchst doch kein Prompt Engineering mehr zu können, ja.  Du brauchst nur einmal Regeln zu definieren, wie die KI das macht, und dann macht sie es halt einfach, ja.  Also ganz viele Sachen werden auf einmal obsolet, von denen wir dachten, dass sie so relevant sind. Also wir hinterfragen auch gerade unsere Projekte und was muss man jetzt wirklich machen?  Also was ist jetzt wirklich wichtig? Dadurch, dass sich alles ändert durch diesen Paradigm-Shift.

9:38 - Jonas Diezun (beam.ai)
  Aber das ist auch was, glaube ich, das müssen wir, ja, das müssen wir halt, was ändert sich denn? Also wie machen wir es denn in der Zukunft?  Und wie können wir es auch mit unserem Partner machen? Weil das Partnergeist ist krank geil, wenn die halt einfach die Implementierung quasi von selbst so da passiert, ne?  Ja, ja, das können die dann.

9:56 - Dorian Schlede (beam.ai)
  Naja, stell dir vor, du weißt permanent, wie die... Wenn gesamte Beam-Plattform funktioniert oder die KI weiß permanent, wie die gesamte Plattform funktioniert, dann muss der Nutzer das gar nicht mehr wissen.  Dann muss der Nutzer nur noch sagen, was er haben möchte. So in die Richtung geht es. Ich habe das Ding gestern, hatte ich einen Call mit Brad.  Die waren auch total an der SDK interessiert. Also relativ viele Firmen haben ja auch die Programmierer, die dann sowas benutzen können.  Und wenn wir denen dann in geile, und die benutzen auch Cursor und Cloud Code, ja, also alle, die dabei sind, benutzen das alle selber schon.  Und wenn wir denen ein geiles System um unser Produkt herum bauen, mit dem sie unser Produkt benutzen können, dann wird das halt eine richtig geile User Experience.  Nur ist dann halt der User nicht mehr der No-Code People, sondern halt die Code People. Aber die können auch eine geile Experience haben.  Aber ist es nicht mittelfristig?

10:51 - Jonas Diezun (beam.ai)
  Dann wird der Code abzeugt. Dann wird der Coder nicht auch wegfallen, weil am Ende machst du einfach einen Call und sprichst  Ein, was du haben willst und sagst halt, welche Integration du hast und packst das in dieses, was auch immer der Name dann ist, speicherst die Daten und fängst halt an, zu bauen und dann iterierst du und dann machst du wieder einen Call.  Mein eigener Workflow hat sich ja auch krass geändert. Ich spreche halt rein. Gestern habe ich sechs Minuten mit Claude telefoniert, nicht telefoniert, reingesprochen.  Dann habe ich auf Ray gedrückt, dann habe ich gemerkt, dass es halt viele Sachen nicht richtig verstanden hat und es auch meistens einfach ungenau war.  Also habe ich dann nochmal iteriert, ja, und gesagt, das, das, das ist besser. Das war dann ein bisschen painful, weil dann habe ich tatsächlich das Skript editiert.  Aber, so, wenn ich das jetzt mit einer Beschreibung mache, was ich haben will.

11:40 - Dorian Schlede (beam.ai)
  Kriegst du, was du haben willst. Ja, also meiner Meinung nach geht es jetzt dahin, dass der Mensch für die KI arbeiten muss.  Also, die KI arbeitet nicht für dich, sondern du arbeitest für die KI und deine Aufgabe ist es eigentlich, den kompletten Kontext jetzt KI zu geben, damit...  Sie perfekt versteht, was du willst. Und dafür habe ich jetzt auch diesen interaktiven Modus gebaut, wo die KI mit dir zusammen dir Fragen stellt, um zu verstehen, was du genau möchtest, um sozusagen deine Gedanken anzuregen, damit du auch wirklich alle Informationen gibst.  Das heißt, bei mir hast du eben eine relativ, sagen wir mal, 10-Minuten-Planungsphase. Aber wenn du die 10-Minuten-Planungsphase hast, dann ist deine Implementierung halt perfekt.  Und ich muss sie mir nicht mal mehr kontrollieren, weil ich weiß, dass sie funktioniert inzwischen. So gut ist es schon.

12:33 - Jonas Diezun (beam.ai)
  Ich bin immer bei einer Sache ein bisschen skeptisch, was dieses, deine Planungsphase ist perfekt. Ich bin aber perfekt. Planungen sind immer scheiße.  In allen großen Firmen. Das funktioniert nie, weil irgendein Vollidiot wieder irgendwas vergessen hat und du nie komplett alles weißt.  Genau. Deswegen, wenn du von perfekter Planungsphase sprichst, wie wirklich ist die perfekte Planungsphase? Weil ich glaube da nicht ganz dran.

13:07 - Dorian Schlede (beam.ai)
  Also was am wichtigsten ist, ist, die KI tendiert dazu, sich nur auf das zu fokussieren, was sie macht, aber nicht, wie implementiert sich das ins gesamte Bild.  Ja, also wenn ich eine Software baue, ein neues Feature baue, dann ist das Feature ja nicht nur das Feature, sondern es hat ja noch Abhängigkeiten in das sonstige Produkt.  Und das verpasst die KI immer. Dadurch, dass ich aber in diesen Planungsmodus gehe, schaut sich die KI auch an, was sind die Abhängigkeiten von dem, was ich gerade tue, zu allem anderen, was hier noch existiert.  Und das bringt den Unterschied. Dieses, wie integriert es sich in das große Bild?

13:50 - Jonas Diezun (beam.ai)
  Und wenn wir dann, wenn man dann einfach, also wenn dann irgendwas Neues auftaucht, dann updatet sich das halt und integriert sich.  Also eigentlich ist die Planungsphase dann vielleicht auch nicht ganz so... Kriegs entscheiden, wenn du dann doch ab und zu wieder was Neues ändern kannst, oder?  Wie darf ich das verstehen?

14:08 - Dorian Schlede (beam.ai)
  Ja, klar, also du kannst immer was ändern, ne? Also du planst, dann generiert die dir ein Product Requirements Dokument, dann guckst du es dir an, änderst du es vielleicht.  Manchmal ändere ich aber auch was in der Implementierung oder so, ja, aber was interessant ist, ich trenne halt Planung und Implementierung.  Also ich habe jetzt, stell dir vor, du hast einfach permanentes Memory über jede Claude Session. Das heißt, jede Claude Session weiß halt, was du in der letzten gemacht hast, ne?  Das heißt also, in einem Chat plane ich clean, ne? Aber dafür sehr tief, dann beende ich den Chat und dann starte ich halt den nächsten Chat mit der Implementierung.  Und auch das erhöht wieder die Qualität enorm, weil du halt ein frisches Context Window hast, aber du hast trotzdem alle relevanten Links und Informationen, um sozusagen loszulegen.  Und das ist halt genau das, was quasi fast alle anderen nicht tun, ne? Nehme ich mal an. Die machen halt einfach einen Chat, planen, kreuz und queren.  Und irgendwie implementieren sie es und dann klappt es irgendwie nicht so ganz.

15:05 - Jonas Diezun (beam.ai)
  Okay, verstanden. Und das ist wirklich insane.

15:08 - Dorian Schlede (beam.ai)
  Also ich bin so mind blown, weil ich baue einfach drei Features gleichzeitig bis zu fünf und ich mache einfach nur die Planung sauber und die Implementierung funktioniert halt einfach.

15:19 - Jonas Diezun (beam.ai)
  Aber was ist das dann für ein Feature beispielsweise?

15:24 - Dorian Schlede (beam.ai)
  Sind so System Features. Also das eine ist, also die Features sind eigentlich, also Feature ist eine Automation, die ich baue.  Also es ist entweder ein Task, was eine einzelne Unit ist, sowas wie hol mir Daten von Linear oder schreib Daten zu Notion oder verarbeite die Transcripts und update mein Project Summary.  Ja.

15:45 - Jonas Diezun (beam.ai)
  Das sind Tasks.

15:46 - Dorian Schlede (beam.ai)
  Und dann habe ich Workflows, wo ich sozusagen diese Tasks einfach kombiniere und chane. Und alles, was die KI macht, ist eigentlich nur Files aufzurufen.  Also die Files sind sozusagen die Execution Anweisungen. Ja, das heißt also... Ich starte den Agent, der lädt den ganzen Projektkontext, der lädt dein Project Briefing, der kennt die komplette Ordnerstruktur, der weiß, wie alles funktioniert, der kennt auch dein Project Memory, also der sieht auch, was du zuletzt gemacht hast.  Dann ist er geladen. Das heißt, der lädt erstmal so 30.000 Zeilen Text rein, um überhaupt zu starten. So, und dann legst du halt los, und dann sagst du halt zum Beispiel, jetzt möchte ich ein Feature planen, und dann hat er den Trigger, dass er das Dokument aufruft, wo der Workflow beschrieben ist, wie du ein Feature planst.  Und in dem Workflow, wie du ein Feature planst, ist dann das nächste File verlinkt, für den ersten Task, und dann geht er halt das File durch, öffnet dann das File für den ersten Task, und führt dann den ersten Task aus, und geht dann zurück, und geht zum nächsten Task, und führt den nächsten Task aus.  Und es funktioniert halt einfach wunderbar. Das heißt, mein komplettes Programm sind einfach nur Markdown-Files und Text. Die Dokumentation ist...  Das Programm selber. Okay.

17:03 - Jonas Diezun (beam.ai)
  Und, das stimmt. Ja, und könnten wir das jetzt auch irgendwie, also wie können wir das am besten für uns nutzen?  Auch, also, sorry, wenn ich jetzt, also ich verstehe, wir werden das sowieso weiterentwickeln, aber wie nutzen wir das für uns als Beam Company im Marketing?  Also ist das einfach ein, setzen wir jetzt einfach, sobald wir unsere Chat-Variante haben, setzen wir die da vor und dann ist das halt ein bisschen verbessert und dann schreibt das halt irgendwie in einen neuen Folder auf der Plattform oder machen wir das einfach frei oder wie machen wir das?

17:34 - Dorian Schlede (beam.ai)
  Naja, also, es kann sogar, also erstmal benutze ich das im Solutions Team und verbessere das, weil ich lerne auch von jeder Experience.  Also erstmal würde ich es intern benutzen. So, Marketing ist das, was dich interessiert. Also es gibt, glaube ich, mehrere Optionen.  Also Open Sourcing ist auf jeden Fall eine Option. Die fände ich natürlich sehr interessant, weil es dann auch irgendwie meine Credibility erhöht und so.  Und ich glaube für uns auch in... Gesamt relevant ist, ja. Das ist eine Option. Eine andere Option ist, du könntest so ein Interface bauen wie Replit oder Lovable oder Kiro.  Ja, Kiro ist sowas ähnliches. Das ist von AWS. Das benutzt Burak auch. Die haben auch so einen interaktiven Planungsprozess gebaut, wo sie sozusagen auch mit dir zusammen deinen PRD entwickeln.  Aber von dem, was ich jetzt gesehen habe, ist das, was ich gebaut habe oder was Burak gerade baut, schon deutlich fortschrittlicher.  Genau, das heißt, man könnte relativ einfaches Interface machen, so wie Cursor auch aussieht. hast irgendwie einen Chat, du hast die Text und du hast dann halt einfach deine Files.  Und dann machst du es halt irgendwie so, dass es ein bisschen user-friendly ist. Wie auch immer, ne. Und dann reicht es auch schon.

18:47 - Jonas Diezun (beam.ai)
  Aber das können wir doch eigentlich relativ einfach in unserem, in unserem, mit unserem Cursor wieder mocken, ja. Und dann, ich meine, wir können es ja auch im Service verpacken, wir es halt auf die Plattform machen, halt oben unter Beam, oder wir machen es, das ist halt das Beam-AI-Interface.  Und dann sind das.

19:01 - Dorian Schlede (beam.ai)
  Und dann kannst du das, was du in Cursor machst, kannst du dann auch in der Plattform machen. Also du baust einfach nur einen File-Editor nach und dann ist das sozusagen in die Plattform direkt integriert, ohne dass die Leute Cursor benutzen müssen.

19:18 - Jonas Diezun (beam.ai)
  Ja und dann kannst du es ja immer noch für Cursor freigeben, das kommt ja sowieso dann über die SDK, aber dann hast du halt irgendwie erstmal, kannst du halt sagen, hey guck mal, so und so und jetzt baue mir die Automatisierung und dann hast du halt so einen gewissen Login und bringst halt irgendwie im Allfall viele Leute auf die Plattform, die das mal ausprobieren.

19:35 - Dorian Schlede (beam.ai)
  Ja, genau, also ich weiß halt nicht, wie viel UX-Verbesserung man rumbauen muss, weil gerade ist es noch nicht so einfach zu benutzen, vor allem, weil es halt manchmal Fehler macht und wenn du die Fehler nicht siehst, zum Beispiel, es liest nur 100 Zeilen von deinem PRD und fängt dann an, dein Feature zu bauen.  Ja und dann baut es und baut es und baut es, aber es hat gar nicht die letzten 700 Zeilen gelesen.  So und wenn du das nicht... mitbekommst, dann hast du ein riesiges Problem, weil dann denkst du, es funktioniert, aber es funktioniert halt nicht.  Das heißt also, es gibt noch so ein paar Problemchen, die man erstmal lösen muss, bevor das sozusagen wirklich usable wird, für Leute, die keine Ahnung haben.  Aber dauert nicht lange, denke ich.

20:16 - Jonas Diezun (beam.ai)
  Ja, ich meine, ganz ehrlich, ist es auch nicht so schlimm. Also ich nutze ja Claude und es ist wirklich scheiße.  Also wie häufig ich einen neuen Chat aufmache und es schreibt im alten Chat weiter und dann kriege ich einen Error und dann geht es nicht mehr.  Also es ist wirklich eine Frechheit langsam. Ähm, wirklich schlecht, wirklich schlecht. Ähm, und dann immer diese Limits. Also Claude geht mir richtig auf die Eier, muss ich sagen.  Und die sind, Alter, sind eine 40 Milliarden Firma oder was auch immer, ja. Ähm, ich liebe sie.

20:43 - Dorian Schlede (beam.ai)
  Weil GPT-5 und Gemini kriegen das nicht hin, die Software zu benutzen. Das kriegt nur Claude hin. Ähm, die Komplexität.  Ja. Wir haben ihre Nische gefunden in diesem Magentic Coding. Da sind sie mit Meilenwahl voraus aktuell. Krass, ne?

20:59 - Jonas Diezun (beam.ai)
  Ja. Ja. Ja. Die machen halt ein bisschen zu viel. Ich finde Schedulie auch nicht mehr so geil. Es nervt mich auch einfach.  Ich mag es auch nicht mehr.

21:07 - Dorian Schlede (beam.ai)
  Nee.

21:08 - Jonas Diezun (beam.ai)
  Gut, trotzdem 100 Milliarden Firma, läuft trotzdem für sie.

21:12 - Dorian Schlede (beam.ai)
  Ja, 800 Millionen Nutzer, glaube ich. Also ist schon okay. Würden wir nehmen.

21:18 - Jonas Diezun (beam.ai)
  Geist ist krank. Ja, und das ist, glaube ich, das... Ich habe auch mit Sarkip vorhin drüber gesprochen. Er meinte, und das fand ich eigentlich sozusagen, sometimes I have the feeling we're too afraid.  Ja, und ja, also, weißt du, es war auch ein bisschen, wir haben halt auch viel Scheiße gehabt. Das hat vieles überhaupt nicht funktioniert.  Ich weiß nicht, wir haben das jetzt vor drei Monaten gemacht und die Plattformen einfach zusammengebrochen. Dann hätte auch niemand Spaß daran gehabt.  Ja, also, so jetzt, glaube ich, haben wir so ein neues Selbstbewusstsein. Jetzt, weil wir sehen, diese  Arbeit lohnt sich mal.  Wir können die Kunden irgendwie halbwegs happy stellen. Und jetzt können wir auch geile Sachen bauen. Das, was du jetzt mit dem System...  Eigentlich hättest das ja auch schon vor sechs Monaten irgendwie... Na, okay, gut, es dauert auch immer ein bisschen, aber...  ging das auch noch gar nicht.

21:57 - Dorian Schlede (beam.ai)
  Nee, nee, das geht erst seit 4.0.

22:01 - Jonas Diezun (beam.ai)
  Also zumindest auf dem Niveau.

22:03 - Dorian Schlede (beam.ai)
  Aber, ja.

22:04 - Jonas Diezun (beam.ai)
  Ja, dann lass uns dann einfach schauen, dass wir einfach  it, in den nächsten vier Wochen, oder sechs Wochen, musst du sagen, einfach irgendwie mit rausgehen.  Speed, raus, Glieder.

22:16 - Dorian Schlede (beam.ai)
  Ja, ich schaue jetzt, dass ich das Memory System in eine Datenbank packe und dass es nicht mehr in Texten lebt und so.  Das ist ja geisteskrank, weil du hast ja Textanweisungen, hast Datenbanken, hast MCPs, du hast API Calls und die KI kann einfach alles in einem Workflow.  ausführen. Das ist so, das ist so insane. Du kannst einfach echt alles machen. Also, es ist, ja. Let's see.  Machen wir. Erstmal benutzt du es jetzt das ganze Team. Erstmal muss ich es jetzt hinbekommen, dass es stabiler wird, dass die das alle benutzen können und dass ich diese Version Migration mache, weil ich habe jetzt 3.0, die benutzen jetzt alle 3.0, dann entwickle ich das weiter, dann ziehe ich mir die ganzen Learnings aus deren Projekte,  Dann optimiere ich mein System, dann ist es bei 4.0 und dann musst du irgendwie das gesamte System migrieren auf die nächste Version.  Also das ist erstmal das, was ich lösen muss. Und wenn ich dann sehe, dass es ausgerollt funktioniert, ihr das benutzen kann, dann können wir schauen, wie wir damit weitermachen.

23:19 - Jonas Diezun (beam.ai)
  Wie hoch ist der Aufwand jetzt, das zu benutzen?

23:24 - Dorian Schlede (beam.ai)
  Aufwand?

23:25 - Jonas Diezun (beam.ai)
  Nee, anders gefragt, wie schwierig ist das, das zu lernen? Nicht so schwierig.

23:30 - Dorian Schlede (beam.ai)
  Ich mache gerade ein interaktives Artefakt, was es einfach erklärt, in einem Cloud-Artefakt. Da fasse ich alles zusammen. Also du hast eigentlich nur, ich sag mal, irgendwie 5 Kern-Workflows und 3, 4 Sachen, auf die du aufpassen musst, sag ich mal.  Und der Rest ist wirklich nur verstehen, was die KI macht, mit der KI interagieren und drüber nachdenken, ob das alles so richtig ist, was sie will.  Also du musst halt schon selber denken. Also anders geht's nicht. Also es geht. Also es ist wirklich nicht so schwer zu lernen, würde ich sagen.  Ja. Also Jack benutzt es schon, der versteht es ganz gut, Muschdaba fängt jetzt an, mit dem wir eine Session gemacht haben, der versteht es jetzt auch und Hassan benutzt es auch und Hassan hat jetzt die komplette Human in the Loop App nachgebaut, die Sven nicht hinbekommen hat.  Der hat jetzt die komplette App in meine App gepackt, hat dann meine App benutzt, um die Logik zu rauszuziehen und hat es dann nachgebaut und es sieht jetzt schon schicker aus, nach zwei Tagen.  Das, was Sven nicht hinbekommen hat in zwei Monaten, weil Replit zu random ist.

24:40 - Jonas Diezun (beam.ai)
  Replit ist auch, das müssen wir jetzt mal erbenden, ne? Ist outdated.

24:44 - Dorian Schlede (beam.ai)
  Einfach. Ist schon wieder deprecated. Das ist krass.

24:47 - Jonas Diezun (beam.ai)
  Ja, das ist crazy. Das finde ich crazy, ja. Also ich habe das ja auch eigentlich nur zwei Monate genutzt, ja, und es ist...  Aber deswegen, ja, also ich glaube, da müssen wir gut drüber nachdenken und auch so ein bisschen die unterschiedlichen... Klickwinkel, ja, also ich bin ganz ehrlich, wenn jetzt schon bei uns fünf Leute das benutzen, dann können sie auch tausend Leute benutzen, who cares, ja, also du kriegst ja tausend auch hin und viele kriegen es selber hin, ja, so, und von da würde ich jetzt sagen, gut, dann müssen wir halt sagen, wenn es tausend Leute benutzen können, wie können wir das besser bei uns integrieren, I'm pretty sure we can do it very, very fast.  Und ich glaube, wir haben auch die Leute, die das können.

25:22 - Dorian Schlede (beam.ai)
  Wie gesagt, ich stabilisiere das System, ich lerne von den Fehlern, die mein Team macht und was mein Team nicht versteht und dann baue ich eine Usability Experience darum, dass die Leute das relativ intuitiv während des Machens, ne, also die KI suggeriert ja immer, was du als nächstes tun sollst.  Also wenn du ein Chat beendest, dann öffnest du den nächsten, empfiehlt dir die KI, hey, du hast gerade dein Feature geplant, baust du jetzt zu Ende, ne, und so versuche ich jetzt dieses System sozusagen den Nutzer zu guiden, dass der Nutzer weniger Fehler machen kann und dann kann das auch ein Surf benutzen, potenziellen Bread, ja, und so weiter, also kann man dann schauen, ne, das Engineering Team sowieso, ähm.

26:01 - Jonas Diezun (beam.ai)
  Ja, also, okay, klingt doch gut. Lass uns da weitermachen. Also, ich glaube, was super wäre, lass das weiterbauen, lass uns die Leute da draufziehen und dann, wenn du das Gefühl hast, fünf Leute verstehst, dann ist es sicher, dass es 2000 Leute verstehen werden oder noch mehr.  So, und dann müssen wir uns überlegen, wie geben wir das raus und gleichzeitig überlegen, wie kriegen wir das so hin, dass das entweder ein bisschen wie Beam aussieht oder für uns irgendeinen Benefit hat.  Das wird ganz einfach.

26:28 - Dorian Schlede (beam.ai)
  Wir müssen uns einfach nur aus der Demo-App einmal die Components sauber rausziehen, dass wir sie als separates Paket haben, wie die Beam-Components aussehen und dann können wir das überall machen.  Dann bauen wir dir hunderte Demo-Apps, Custom, Human in the Loop, bla, wir können alles designen im Beam-Style. Also, wir müssen uns halt nur einmal sauber vorbereiten, ne, und verteilen.

26:50 - Jonas Diezun (beam.ai)
  Ja, aber, dass wir dann irgendwie, dass man jetzt sagen kann, hey, guck mal, hier hast du jetzt ein Interface, da legst du jetzt irgendwie los.  Aber ich glaube, was wichtig ist, die Interfaces zu ownen, ist schon irgendwie wichtig. Ja, das macht auch Cloud. Im ChatGPT musst du halt das Interface ownen.  Klar kannst du auch das SDK ownen und wenn du einmal drin bist, dann ownst du auch irgendwas, aber ich glaube, die haben ja alle so eine duale Strategie.  Du kannst halt die SDKs und die APIs verwenden und du hast ein Interface, was du nutzen kannst. Und für viele Leute ist das Interface halt so der erste Kontakt und dann fangen sie halt irgendwie an, das im Detail zu nutzen, weil es eigentlich gar nicht geil ist.  Ich glaube, diese Dualität, wenn wir die hinbekommen, das wäre halt sehr sick. Das heißt, du rufst dich in Beam.ai, Linksbums ein oder stoppst da drauf und da machst du das halt.  Ja.

27:33 - Dorian Schlede (beam.ai)
  Also meiner Meinung nach kann es sogar der einfache Chat werden. Also wenn man es einfach hält, kann es auch nur der Chat sein.  Wenn man es eben ein bisschen dedicated baut, dann kann man es halt einfach als Expertenmodus vielleicht oben toggeln. Okay.  Und das eine ist der Viewer und das ist halt in Sync. Das eine ist der Viewer, das andere ist der Codebilder und du kannst in beidem halt bauen.

27:57 - Jonas Diezun (beam.ai)
  Ja, okay. Ja, cool. Ja, cool. Also so die Fathoms, wenn ihr da irgendwelche Sessions habt, oder? Dann lese ich mir das einfach durch oder schaue es mir an.
  ACTION ITEM: Create cheat-sheet artifact summarizing core info & process from 4 sessions on new system for team consumption
 - WATCH: https://fathom.video/share/2gsTL-LouNj7uwC-455MjFzotQ_u9cx4?timestamp=1685.9999  Die andere Session habe ich mir auch angeschaut, aber ist nicht komplett. Ja, die Session im Musterbar war vielleicht ganz gut.

28:16 - Dorian Schlede (beam.ai)
  Ich hatte vier Sessions dazu. Ich fasse die gerade zusammen und mache ein Cheat-Sheet-Artefakt, wo man die Kerninfos einfach sieht und versteht, auch wie der Prozess funktioniert und so.  Das sollte nochmal einfacher zu konsumieren sein als irgendwie was anderes.

28:32 - Jonas Diezun (beam.ai)
  Ja, also gerne. Ja, genau. Auch so, wie sieht das dann am Ende aus? Dann kann ich mich darüber nachdenken.  Dann bringen wir das irgendwie zusammen und dann ab dafür. Dann denke ich nochmal weiter über Namen nach.

28:44 - Dorian Schlede (beam.ai)
  Irgendwas, was ich immer so ein bisschen am Wochenende immer machen.

28:51 - Jonas Diezun (beam.ai)
  Ja, aber ich glaube, dass wir jetzt irgendwie, so wie du sagst, wir sind so on the edge to escalate und das müssen wir jetzt halt einfach pressen.  Irgendwo wird die Scheiße herkommen.

28:58 - Dorian Schlede (beam.ai)
  Die kommt jetzt so, keine Sorge. Sehr zuversichtlich. Ich würde mich wundern, wenn viele andere Leute auf dem Niveau gerade die Sachen machen, was wir gerade tun.  Also das würde, ja. Das würde ich optimal nutzen. Und das ist halt, so Software ist gar nicht so viel wert und Produkte, weil du kannst halt Produkte so schnell bauen.  Eigentlich ist es viel wichtiger, diese Systeme bauen zu können, als ein System zu besitzen oder zu haben. Weißt du, was ich meine?  Weil die KI wird immer smarter. Die KI kann immer bessere Systeme bauen. Das heißt, wahrscheinlich kann ich jetzt schon ein besseres Replit bauen.  Einfach nur, weil die KI besser ist, die das Produkt baut. Weißt du, was ich meine?

29:37 - Jonas Diezun (beam.ai)
  Das ist so krank und es ist auch very frightening, ja. Deswegen war ja auch immer so, da war immer so ein Teil in mir, der gesagt hat, nicht zu früh rausgehen und zu früh erfolgreich sein, weil du willst dann da sein, wenn die Welt zu Ende geht mit unseren Fähigkeiten.

29:55 - Dorian Schlede (beam.ai)
  Ja, gucken, ob die Welt jetzt zu Ende geht. Also, ja.

30:01 - Jonas Diezun (beam.ai)
  Ja, also was wir auf jeden Fall jetzt auch nochmal, also wir müssen so quasi das, was jeder macht, das müssen wir, wir haben im Go-To-Market-Team einfach diese Person nicht, die das so richtig nerdet.  Ja. Wir wollen das jetzt irgendwie mal finden.

30:19 - Dorian Schlede (beam.ai)
  Ja, aber haben wir doch, oder? Ein Interview noch jetzt, oder? Ja, aber haben wir sie schon gefunden, ne? Willst du da eine Person aus Pakistan oder willst du, ist es dir egal und du bist einfach einer, die dein Problem löst?  Eine, die mein Problem löst, ja. Okay. Ich hab viele Probleme.

30:36 - Jonas Diezun (beam.ai)
  Ja.

30:37 - Dorian Schlede (beam.ai)
  Weil sowas löst, glaube ich, relativ viele Probleme in einem auf, wenn da jemand ist, der das wirklich drauf hat, weil dann müssen die Leute auch nicht mehr 20 Calls am Tag outbound machen oder LinkedIn Nachrichten schreiben.

30:52 - Jonas Diezun (beam.ai)
  Siehst ja trotzdem, wie lange die Scheiße teilweise dauert, Alter, Booth & Partners auch, Alter, das ist so ein Kotzen.  Die Extension.

30:59 - Dorian Schlede (beam.ai)
  mehr, auch Untertitelung

31:02 - Jonas Diezun (beam.ai)
  Ja, aber das ist das, wo wir uns einfach wirklich systematisch jetzt hinsetzen, wo kriegen wir die Zeit runtergecuttet, ja, und was machen wir schneller und wo geht das Nächste, ja, so.  Die Deal Cycles meinst Die Deal Cycles und dann auch den Value, ja, also den Value wirklich schnell zeigen. Hier lock dich ein, das ist das Ding, was dein Problem löst, ja, das baut sich selbst, erzähl, mach einfach zwei Phone Callen mit dem Ding, ja, und erzähl, was deine Probleme sind und danach hast du sie gelöst, weißt du?  Echt, würdest du da hinkommen?

31:30 - Dorian Schlede (beam.ai)
  Ja, ich glaube, das wird noch ein bisschen dauern, weil jetzt kommt der wirklich schwierige Teil, jetzt haben wir ein Agent Setup System, aber Prompt optimieren ist einfach, aber wie optimierst du das Agent Setup System, wo du irgendwie sechs verschiedene Prompts hast, ne, die miteinander interagieren, weißt du, was ich meine?  Also, das ist ein deutlich schwierigeres Problem.

31:52 - Jonas Diezun (beam.ai)
  I'm pretty sure AI will solve it. Das denke ich auch, wir kriegen das nicht.

31:59 - Dorian Schlede (beam.ai)
  Ja, wir sind jetzt bei dem Recursive Setup. Improvement Loop schon angekommen, also BOAG und ich, die KI macht sich selber immer besser.  Und wenn du dieses realisierst, dass wir an diesem Punkt jetzt sind, dann ist das schon ziemlich crazy. Ach komm, wir stehen auch alle drauf.

32:19 - Jonas Diezun (beam.ai)
  Ja, ist auch schon geil, Ja, es ist halt das, wovon wir immer die ganze Zeit geredet haben. Wenn wir jetzt da hinkommen, dann ab dafür, ja.  Die anderen kommen da auch hin.

32:28 - Dorian Schlede (beam.ai)
  Das ist der Punkt.

32:31 - Jonas Diezun (beam.ai)
  Die anderen kommen da auch hin. Die Frage ist, es ändert einfach alles, ja.

32:35 - Dorian Schlede (beam.ai)
  Weil Software ist nicht mehr so viel wert. Die Frage ist, was bedeutet das alles, ja. Das frage ich mich halt.  Was bedeutet das, wenn jetzt auf einmal der Skillsoftware zu bauen viel mehr wert ist, als eine bestehende Software?

32:49 - Jonas Diezun (beam.ai)
  Das wird noch alles sehr lange dauern, ja. Aber ich glaube für uns, ich meine im Idealfall kriegen wir jetzt das gut hin.  Dann sind wir nächstes Jahr irgendwie eine Milliardenfirma und in drei Jahren sind wir halt irgendwie eine Fünf-Milliardenfirma. Then we're good, you know?  Ja, das kann relativ schnell gehen, denke ich.

33:06 - Dorian Schlede (beam.ai)
  Wenn du einmal den Spot gehittet hast, dann müssen wir Den können wir nur hitten, wenn wir was machen, was sich selbst verbreitet.

33:18 - Jonas Diezun (beam.ai)
  Richtig. Genau.

33:20 - Dorian Schlede (beam.ai)
  Sowas wie Love Bill, ne? Oder Manus. Stimmt, die gab's ja auch noch, ja. Ja, die dann halt Leute einfach benutzen und sagen, das ist geil.  Okay.

33:30 - Jonas Diezun (beam.ai)
  Richtig. Und dann kommt so ein Hype und dann kommt das Nächste. Das ist nicht so einfach, aber das ist das, was wir hitten müssen.  Deswegen müssen wir auch sehr viel drüber nachdenken, ja.

33:42 - Dorian Schlede (beam.ai)
  Aber uns ist es auch nicht so  wie eine Love Bill, weil eine Interface checkt jeder. Ja, jeder versteht Interface, aber eine Automation verstehen viele Leute auch einfach nicht, ne?  so abstrakt.

33:53 - Jonas Diezun (beam.ai)
  Richtig. Richtig. Deswegen müssen wir auch das Interface davor setzen. Wir müssen irgendwas, auch jetzt in deinem System irgendwas, das Interface muss, was cooles an.  Anzeigen, ja. Das ist einfach, die Leute blicken, ist sonst nicht.

34:08 - Dorian Schlede (beam.ai)
  Aber was kann man denn cooles anzeigen? Diagramme, was die KI gerade gedacht oder getan hat, die visualisieren und vereinfachen.

34:18 - Jonas Diezun (beam.ai)
  Ja, oder halt auch so graf, irgendwie X-Learnings in der letzten Stunde oder irgendeiner Scheiß. Und ja, am Ende, jetzt müssen wir einfach so ein Dashboard bauen, ja, wo halt steht, hey, guck, irgendwie gerade laufen drei Agents und die machen so und so viele Sachen, weißt du, dass du anzeigst, was eigentlich gerade passiert.  Besser. Also es laufen gerade so und so viele Files wurden generiert, so und so viel wurden gelesen, so und so viele Zeilen.  Das sichtbar machen, was passiert. Das ist ganz wichtig.

34:49 - Dorian Schlede (beam.ai)
  Ja, passieren halt schon so coole Sachen wie, alle 30 Project Memory Einträge wird ein Automatismus getriggert, den muss der Nutzer gar nicht auslösen, das passiert automatisch und dann werden die zusammengefasst und Learnings rausgezogen.  Oder jetzt baue ich gerade eine Feature Roadmap Automation. Also es gibt erst eine Automation, die automatisch Feature Proposals macht, basierend auf deinem Kontext und dann gibt es noch eine Automation, die dir aus den Feature Proposals automatisch eine Roadmap macht.  Das heißt, das System hat auch noch eine selbst updatende Roadmap, die dir permanent neue Features suggeriert und vorschlägt, die du bauen kannst.  Ja, aber guck mal, das ist doch eigentlich recht einfach.

35:26 - Jonas Diezun (beam.ai)
  Was machst du? Nimmst die rechte Sidebar, machst ein Activity rein, ja, und treibst halt rein, Running Automation right now.  Running this. Zeig es einfach nur an. Running Learning. Suggesting new feature. Ja.

35:39 - Dorian Schlede (beam.ai)
  Ja, ich glaube, so Cursor-Style reicht aus. Also ein bisschen schicker. Ist, glaube ich, nicht schwer, das ein bisschen schicker zu machen.

35:47 - Jonas Diezun (beam.ai)
  Ja, und anzeigen, was es tut. Also ich glaube, sowas ist wichtig, was du da gerade sagst. Ja, diese Dinge.  Muss halt irgendwo zu sehen sein. Wo siehst du die gerade? Laufen an einem Terminal, oder? Genau.

35:59 - Dorian Schlede (beam.ai)
  Der ruft dann einen Workflow auf. Dann passiert es im Hintergrund. Ich sehe nichts. Manchmal sehe ich auch schon was.  Manchmal nicht. Und dann gucke ich mir das Output-Pfeil an und scanne es durch, ob das so richtig ist. Ja.  Also Cloud Code ist nicht so geil von der UX. Da ist Cursor schon besser. Aber ja. Also bei Cloud verstehe ich nicht so viel, was passiert.  Deswegen fand ich erst Cursor besser und deswegen fand ich den Umstieg von Cursor auf Cloud nicht so nice, weil ich weniger Insight hatte, was tatsächlich passiert.  Aber dann habe ich mich irgendwann dran gewöhnt. Das ist doch auch.

36:31 - Jonas Diezun (beam.ai)
  Also das müssen wir irgendwie auch dann einfach zeigen. Also lass mal überlegen, wie wir da ein Interface draufbauen, dass das irgendwie cool ist.  Und Insights generaten und so. Dashboard. Ich glaube, vielleicht brauchst du nur so zwei, Sachen. Du brauchst halt ein Dashboard, wo es zeigt, was er gemacht hat.  So wie unsere Analytics Page. Die hilft halt auch krass, wenn da was steht. Dann updatet sich das. Und das zweite ist, du hast halt ein Activity Log.  Und so fertig.

36:58 - Dorian Schlede (beam.ai)
  Ja. Ich glaube, man kann da einen coolen MVP draus machen. Du brauchst wirklich... Ich viele Sachen. Also du brauchst Task, Workflows und was, um Features oder Projekte halt zu bauen, ne?  Um die Task und die Workflows zu bauen. Das ist eigentlich alles, was du brauchst. Und dann kann man das irgendwie anzeigen, das sind dann Features, die du gerade baust, ne?  Keine Ahnung, ne?

37:14 - Jonas Diezun (beam.ai)
  Du kannst ja mal zeigen, wie das in unserem Interface aussieht, weil am Ende, wir haben ja viele Bausteine schon.  man das dann machen.

37:22 - Dorian Schlede (beam.ai)
  Ja. Wenn das System selber stabil ist, dann denke ich mal über einen Interface nach. Das kann ich mir ja auch selber alles bauen.  Okay. Eben.

37:30 - Jonas Diezun (beam.ai)
  Ich glaube, muss gar nicht krass stabil sein, ja? Also, Claude ist auch nicht stabil.

37:37 - Dorian Schlede (beam.ai)
  Ja. Ja, ich, ich schau mal. Ich bringe jetzt erstmal die nächste Version raus und so. Ich, ich, ich, ich mach das, ja.  Das ist sehr, sehr groß, fühlt sich das an. Ja, das ist gut.

37:49 - Jonas Diezun (beam.ai)
  Ja. Das ist gut. Ja.

37:52 - Dorian Schlede (beam.ai)
  Ja, finde ich auch. Ich bin auch sehr happy. Also, mein Team ist richtig motiviert gerade. Das war wirklich, die waren richtig in einem Loch drin.  Ähm, jede Woche so. Das geht nicht. Das das geht nicht, schon wieder dieses Problem, boah, die Ladezeit, 5 Sekunden, weißt du, dann zeigt einer was und dann öffnet der den Task und dann, aber jetzt durch diesen Shift, jetzt fokussieren die sich gar nicht mehr auf die Probleme, sondern jetzt sehen sie alle nur noch die neuen Möglichkeiten, die sich daraus ergeben und deswegen sind die jetzt alle extrem motiviert, ja, das ist echt super zu sehen.

38:27 - Jonas Diezun (beam.ai)
  Das ist nice, das ist geil, ist gut zu hören.

38:31 - Dorian Schlede (beam.ai)
  Ja, ich glaube, wir sind auf einem guten Track.

38:35 - Jonas Diezun (beam.ai)
  Spinner Jack, Spinner Jack, Weil sie der Sommer, so early Sommer, da war auch echt eine Plattform aufgemacht, dann wieder off, dann wieder das, wieder das, ja, kriegst du echt irgendwann auch Rappe, also.

38:47 - Dorian Schlede (beam.ai)
  Ja, ich bin auch froh, dass du jetzt dich dafür entschieden hast, relevante personelle Shifts zu machen, ja, beziehungsweise ja, den,  Den Fokus da ein bisschen anders zu setzen, das ist, glaube ich, sehr wichtig, weil das war permanent irgendwie ein Bottleneck.  Insofern bin ich da, der auch sehr dankbar, dass das jetzt passiert. Du meinst mit Akib?

39:14 - Jonas Diezun (beam.ai)
  Ja. Ich rede um den Brei.

39:16 - Dorian Schlede (beam.ai)
  Weil der Notetaker ist irgendwie da, das hört sich komisch an.

39:19 - Jonas Diezun (beam.ai)
  Wer ist da? Hä? Wer ist da?

39:22 - Dorian Schlede (beam.ai)
  Der Notetaker. Der Notetaker. Ja, nee, aber ja, also es ist schon wirklich glücklich.

39:28 - Jonas Diezun (beam.ai)
  Ja, es war auch, ich habe das ja auch schon länger gespürt, ja, und ich hatte mit ihm auch schon irgendwie so im Herbst die Diskussion und dann hatte ich ja, ich habe ja auch schon mal mit ihm die Diskussion angefangen, so ein bisschen im Herbst, Winter, und da war ich im Winter einfach so im Arsch, dass ich das dann wieder begraben habe, ja, und einfach gesagt habe, ich muss jetzt zwei andere Sachen lösen, weil dann musste auch wieder, dann war ja Bild, dann irgendwie Funding und so, dann war das halt, Prio.  Und jetzt halt, ich hatte so ab Mai, also auch als ich selber dann mit Replet angefangen habe, habe ich mich so gefragt, why the , also es gibt so  Viele Sachen, die wir irgendwie alle machen können und wir pushen halt nicht so hart drauf. Wir sind immer noch unterwegs wie vorher.  Ich packe es nicht. Design Team macht das nicht und irgendwie alles so. Und dann war es so, dann war es so, dann habe ich gemerkt, irgendwie es nervt mich.  Dann habe ich natürlich irgendwie auch mit Bene, weil ich auch nicht so ganz wusste, wo das ist, dann mit Bene angefangen.  Da war auch ein paar Issues. Dann habe ich gemerkt, okay, eigentlich ist es nicht so richtig, das Product Problem.  Da waren andere Probleme, aber ich habe auch einfach nicht gesehen. Ich hatte keine Visibilität, was irgendwie ein Product abgeht.  Da haben wir Product gelöst. Dann hatte ich Visibilität, dass Product eigentlich nicht das Problem ist, weil die Roadmap war da.  Sie wurde halt einfach nicht umgesetzt. Das wurde dann mir immer klarer im Mai, Juni. Und dann habe ich einen Rappel bekommen, warum eigentlich nichts umgesetzt wird.  Und dann war ich ja in Pakistan und dann habe ich gesehen, das Team ist jetzt nicht crazy und die sind alle ziemlich unsicher, aber ich glaube, da ist schon Potenzial.  Und wenn das nicht ausgeschöpft wird, dann ist das Problem irgendwo anders. Und dann hatte ich die ganze Zeit so ein Ohnmachtsgefühl.  Ja, du sitzt da und ich denke, ja, ich bin auch auf. Abgewacht und dachte mir, , ja, weil ich weiß, dass es nicht läuft, aber du kannst es nicht so richtig ändern, das war mein Gefühl fast so.  Und dann dachte ich so, okay,  it, ja, muss jetzt, weil sonst, ich muss dieses Gefühl loswerden, ja. Und dann war das, ja, und dafür musst du dann aber auch erstmal wieder subtil irgendwie, subtil den Stress da aufbauen.  Das war ein ziemlich langer Plan, ja.

41:26 - Dorian Schlede (beam.ai)
  Ja, und ist so aufgegangen, wie du es dir vorgestellt hast?

41:29 - Jonas Diezun (beam.ai)
  Ist so aufgegangen, aber ist noch nicht durch, ja. Also ich meine, Aki ist ja jetzt erstmal drei Monate, drei Wochen im Urlaub gewesen.  Das war jetzt auch nicht klar. Ich muss jetzt, wenn er wieder da ist, muss ich erstmal seine Rolle jetzt wieder festlegen.  Kann auch sein, dass er jetzt sagt, du, du musst überlegt, ich geh jetzt. Ähm, wäre auch irgendwie jetzt, äh, das wäre jetzt nicht mal ein Optimal-Szenario, aber dann muss ich wieder andere Sachen erklären.  Aber er muss auf jeden Fall, so wie es jetzt gerade im Engineering läuft, will ich nicht, dass er da wieder reinfasst und irgendwas anfasst, ja.

41:52 - Dorian Schlede (beam.ai)
  Nee, Sopan ist mega, der macht das richtig gut.

41:54 - Jonas Diezun (beam.ai)
  Sopan ist geisteskrank, ja, also ich bin ein richtiger Fan von Sopan, muss ich sagen. Gott sei Dank haben wir den, ey.

41:59 - Dorian Schlede (beam.ai)
  Hätten wir ihn nicht, äh.

42:03 - Jonas Diezun (beam.ai)
  So Pan ist echt gut, Mann. Gott sei Dank.

42:07 - Dorian Schlede (beam.ai)
  Du brauchst diese Ankerpunkte in der Firma.

42:11 - Jonas Diezun (beam.ai)
  Du brauchst diese Ankerpunkte. Ja, jetzt, genau, also jetzt, wenn Aki wieder da ist nächste Woche, es wird nochmal ein bisschen anstrengend für mich, aber nur für euch nicht.  Und dann, glaube ich, müssen wir halt wieder die Sachen, also haben wir ja jetzt schon zusammengesetzt, ja, und dann können wir uns darauf fokussieren, dass wir halt irgendwie was Geiles bauen, ja.  Und dann brauchen wir auch irgendwie, weißt hast du halt irgendein Kernteam, das macht das, und Punkt, ja.

42:36 - Dorian Schlede (beam.ai)
  Also meiner Meinung nach sollte Aki vielleicht mal anfangen, KI-Features zu bauen im ML-Team, ja, und einfach mal hands-on selber irgendwelche Sachen wieder bauen, ja.  Ich glaube, das kann er nämlich, weil, also er ist schon auch gut mit den KI-Modellen, und er ist auch schon sehr, sehr smart, ob WSD, also.  Ja. Ich glaube schon, dass er da auch gute Sachen bauen kann. Er baut halt die ganze Zeit nichts, ne.  Das ist das, was ich nicht verstehe. Also ein CTO muss doch auch selber Code schreiben, Also, das war auch mein Thema.

43:03 - Jonas Diezun (beam.ai)
  Ich auch so, Aki, Alter, mach das scheiß Feature selber fertig, ja. Ich hab keinen Bock jetzt über Authentifizierung zu reden, schrubst halt einfach am Wochenende fertig, ja.  Genauso wie ich jetzt an SEO schrubbe, ja. Das ist so ein bisschen, auf der einen Seite ist das so ein bisschen dieses hierarchische Denken, auf der anderen Seite ist er dann auch so, ja, aber ich kümmere mich ja um die Leute, ist Puder, That's not how it works anymore, ja.  Also, deswegen hab ich ja, ich weiß nicht damit, deswegen hab ich ja irgendwann mal auch erzählt von diesen Vertically, nee, war das?  People, ja. Musst alles können, muss coden können, muss planen können, muss alles machen können.

43:38 - Dorian Schlede (beam.ai)
  Ja, vom kleinsten Detail bis hin auf die oberste Ebene, ne, das ist dein Job dann am Ende.

43:44 - Jonas Diezun (beam.ai)
  Das ist der Job, ja.

43:46 - Dorian Schlede (beam.ai)
  Ja, ich glaube, Aki versteht die Codepase aber auch ehrlicherweise nicht so richtig, also, weil er halt einfach nicht aktiv damit arbeitet.

43:55 - Jonas Diezun (beam.ai)
  Ich glaube, Aki ist an vielen Sachen einfach nicht erfahren genug und er hat dieses Problemhänge schön. wirklich an ist, der an  Das ist halt all over the place ein bisschen too much. Er hat dann die Idee und dann macht er es aber nicht fertig.  Ich weiß halt, da ist ein Problem und dann gehe ich das über drei Monate an und ich lasse aber auch nicht locker, bis es gelöst ist.  Manchmal lasse ich es auch wieder locker, wenn ich merke, es ist keine Primo mehr und dann passiert mir das auch.  Aber wichtige Themen werden halt am Ende gelöst und da ist dann die Abrechnung. Und das ist nicht, weil ich im Mai mal einen Plan gemacht habe und einen NotionDoc aufgesetzt habe, sondern das ist, weil wir im August hier sitzen und wir mal alle irgendwie gute Stimmung haben.  So, das war mein Job die letzten vier Monate. War saueranstrengend, ja, aber so. Und das ist das halt, was du irgendwie als Leader machen musst.  Du musst halt irgendwo das langfristige Problem sehen, da reingehen, das lösen und nicht locker lassen. Es kann auch sein, dass sich das Problem selber löst, ja.  Zum Beispiel Demos. Vielleicht löst sich das ja noch selbst und wir brauchen gar keine Person, ja. Marketing, Go-to-Market löst sich ein bisschen Schritt für Schritt, aber da muss ich auch noch mal wieder rein, ne.

44:58 - Dorian Schlede (beam.ai)
  Ja. Also, ich glaube. So eine Sache, die ich wirklich problematisch fand, war die Emotionalität in Entscheidungen. Und das war wirklich ein sehr, sehr großes Problem.  Na ja, klar, wenn du emotional geleitet bist und nicht auf einer argumentativ-rationalen Ebene Argumente austauschen kannst, was jetzt besser ist, dann ist das natürlich problematisch.

45:29 - Jonas Diezun (beam.ai)
  Ja, das ist auch was, also da bin ich auch nicht unschuldig dran. Und auch Bene und Akib zusammen. Der Akib ist, also Bene und ich vor allen Dingen, ja, wir sind dann auch immer, ne, wir haben halt sehr starke Meinungen.  Mittlerweile aber auch mit Bene, ja, das haben wir jetzt halt auch gelöst, ja, und jedes Mal, wenn er mir auf den Sack geht, sage ich halt, klär das mit deinem scheiß Coach.  Und andersrum auch, ja. ähm, und das ist, ey, das hat sich bei uns auch krass geändert. Wir gingen uns auch im März einfach nur noch auf den Sack, ja.  Ich glaube, wir gingen uns halt auch auf den Sack, weil Bene war halt krass genervt, ich war krass genervt.  Ja. Ja. Und eigentlich wollen wir beide das Gleiche, aber wir kommen halt nicht drumherum, ja, und wir haben es halt nicht hinbekommen, ja, und dann war ich halt krass gefrustet, das ist aber wirklich verarschen, dass das Scheiß immer noch nicht läuft, bin ja so, was soll ich denn hier machen, ja, ich versuche schon irgendwie hier zu managen, also, ja.

46:19 - Dorian Schlede (beam.ai)
  Ich glaube, ein Kernmove war wirklich, den Leuten mehr Vertrauen zu geben, weil die sind, das habe ich, ist mir auch nochmal klar geworden, also die sind alle sehr smart auch, also wir haben da wirklich gute Leute.  Und nur können die sich nicht entfalten. Und ich glaube, wenn wir denen jetzt mehr Trust geben, was wir jetzt schon tun, dann wird da auch noch mehr bei rauskommen, auf jeden Fall, davor.

46:43 - Jonas Diezun (beam.ai)
  Ja, absolut, also glaube ich auch fest dran, ne. Ich war auch in Pakistan, und das war nämlich so, ich war in diesem Office, und irgendwann, du sensest es halt.  Und ich denke mir so, dann habe ich mit Vakar und Adil so geredet, und irgendwie so, ich dachte so, ja, ganz gut, ja.  Aber wenn ich ins Office reinkomme, habe ich so das Gefühl, Alter, das ist... Irgendwie, weiß ich nicht, wie eine Werkbank, irgendwie so uninspirierend.  Uninspirierend? Ja, es war einfach nicht inspirierend im Office. Ich komme da ran und denke mir, Allah, Buddha, Bau. Okay.  Das hat sich dann aber sogar in den Tagen ein bisschen gebessert und jetzt bei den Bildern siehst du es auch, das ist anders, das ist so ein Sense, den du spürst.  Aber ich hatte auch so das Gefühl, entweder können die alle nichts, das kann aber nicht sein. Also ich war wirklich so, nach Pakistan war ich so, also entweder haben wir wirklich insgesamt einfach nicht richtig gute Leute oder ist was Grundlegendes falsch.  Das war mein Fazit nach Pakistan. Ja, und dann war ich so, die erste Variante, I'm not so sure, ja, weil irgendwie sind die doch alle auch nicht so blöd.  Ja, das kann eigentlich nicht sein. So, also läuft irgendwas grundlegend falsch. Also, was lösen wir, ja? Ja. Und dann?

47:52 - Dorian Schlede (beam.ai)
  Das auch meine Erkenntnis.

47:55 - Jonas Diezun (beam.ai)
  Ja, ne?

47:56 - Dorian Schlede (beam.ai)
  Ja, ja, total. Also, die sind besser, als ich dachte. Also, da hast du nicht diese S-Leute. Da hast du einen Supan und dann hast du A-Player, aber du hast nicht mehrere S-Player, meiner Meinung nach.  Was ist für dich S? Ja, Supan zum Beispiel, der wirklich hervorsticht. Ich glaube, da hast du jetzt nicht, da hast du wirklich, glaube ich, nur einen.  Da hast du viele A-Player oder A+. Ja, das stimmt.

48:31 - Jonas Diezun (beam.ai)
  Das stimmt, also ich meine, du siehst es auch so ein bisschen bei Manu, Ali, Hassan, Mushtaba, die sind alle gut, aber auch nicht brutal, ja.

48:40 - Dorian Schlede (beam.ai)
  Aber das ist okay, oder? Das ist okay, ja.

48:43 - Jonas Diezun (beam.ai)
  Du musst auch eine Organisation mit diesen Leuten bauen, die sind ja schon sehr gut, ja.

48:48 - Dorian Schlede (beam.ai)
  Der Punkt ist halt, Hassan und Mushtaba haben nicht, dass ich sie auflevel, aber Ali und Manu haben halt keine Person, die sie auflevelt, ne.

48:58 - Jonas Diezun (beam.ai)
  Ja, wobei da auch schon viel Arbeit reingesteckt haben, aber die war, das war... Auch nicht so, dass da jetzt wirklich so der Kick kam.  Trotzdem sind die gut. Und auch jetzt kam noch mal ein Kick, weil sie halt jetzt immer gemerkt haben, hey, wir können dann doch auch die Sachen selber da bauen.  Und ich glaube, die werden euch jetzt schon gegenseitig auch noch wieder helfen. Also ja, ich glaube jetzt irgendwie, das ist alles positiv.  Jetzt lassen wir uns mal die nächsten vier, sechs Wochen schauen, dass wir das irgendwie auf die Straße bringen. Und dann müssen wir, wir müssen irgendwie entweder einen krassen Boost haben, dann müssen wir auf jeden Fall Umsatz hochbekommen, ja.  Weil, ähm, alles, was wir jetzt irgendwie machen, wir brauchen mehr Umsatz. Wir müssen eigentlich Umsatz verdoppeln, ja.

49:36 - Dorian Schlede (beam.ai)
  Ja. Ja, aber es hätte auch nicht viel früher kommen können, weil ich glaube, wir wären nicht bereit gewesen. Ähm, ne?  Ähm, dann sollte es vielleicht auch einfach so sein. Aber jetzt, genau, jetzt könnt ihr dann langsam den Code cracken und dann können wir auch alles weit handeln.  Ähm, also ich hoffe, ihr, ihr findet den magischen Punkten des repeatable Sales Erfolgs demnächst und dann, ja.

50:00 - Jonas Diezun (beam.ai)
  Also ich glaube, den werden wir finden. Aber ich bin sehr überzeugt mittlerweile davon, dass es nicht, wir werden nicht eine Milliardenfirma sehr schnell, wenn wir Sales machen.  Wir werden eine Milliardenfirma sehr schnell, wenn so ein Produkt sick ist. PLG, ja. Ja, genau, irgendwie so, ob das jetzt PLG ist oder Open Source oder was auch immer, but there it needs to be.  Das ist das, was sie die nächsten drei Monate cracken müssen. Ob das jetzt Open Source ist von irgendwie dem Self-Evolving Knowledge Worker, Operating System oder ob das was anderes ist, I don't  know.  Meine Best Bet wäre gerade das, ja. Vielleicht ist es aber auch nochmal was anderes, I don't know, ja. Vielleicht ist das alles dominiert.  Ja, genau. Ja.

50:44 - Dorian Schlede (beam.ai)
  Der Beam-Plattform-Builder und Steroids. Ja. Mal schauen. Wir kriegen das hin. Also ich bin sehr gespannt. Jetzt bin ich zuversichtlich.  Das war aber auch Jonas, ey, du hast mich hier in was reingeholt, du alter Schwede, ey. Alter Schwede, ey.  Als ich hier im Juli gekommen bin, da war ich ja mal. Ganz schön, äh, ja, naja, haben wir mal durchgekämpft hier.

51:07 - Jonas Diezun (beam.ai)
  Ja, ja, auch danke dir. Also, es war jetzt auch wirklich painful. Es war sehr painful. Es war krass bei Fathom.

51:16 - Dorian Schlede (beam.ai)
  Aber gut, jetzt langsam, ja, jetzt haben wir es, glaube ich. Weil die Leute sind alle so smart. Ich glaube, das Team ist smart genug, um eine Milliardenfirma aufzubauen.  Also, daran liegt es halt nicht, ne?

51:29 - Jonas Diezun (beam.ai)
  Nein, dann liegt es halt nicht, ne? Dann haben es halt noch nicht unlocked bekommen, ne? Jetzt müssen wir halt einen Blocker nach dem anderen wegnehmen.  Jetzt kommen die nächsten Blocker. Irgendwo sind noch andere Blocker drin. Irgendwie, aber, ja, Der Kernblocker ist immer noch das Produkt.

51:43 - Dorian Schlede (beam.ai)
  Also, das Produkt ist immer noch nicht gut genug. Das heißt, wir müssen es irgendwie hinbekommen, das Produkt jetzt auf ein Level zu heben, wo es halt wirklich geiler ist als andere Produkte, in gewissen Bereichen zumindest.  Da sind wir nicht. Wir sind nirgendwo besser als andere Produkte. Ja, das ist halt hart.

52:01 - Jonas Diezun (beam.ai)
  Aber so ist es gerade noch.

52:04 - Dorian Schlede (beam.ai)
  Also unser Self-Learning ist schon gut, aber es ist überhaupt nicht usable. Also der Algorithmus, der KI-Algorithmus dahinter ist sehr gut.  Also Vakar ist auch ein Genius. Vakar ist so ein kleiner Wizard auch. Aber es kann keiner benutzen. Also die Seite fehlt uns einfach noch.  Und die Features sind auch zu kompliziert. Also auch das Tool-Tuner V2, was ich jetzt baue, ich guide jetzt das Team in den Feature-Team, aber die sind so weit weg von einer sinnvollen Implementierung oder grundsätzlichen Produktverständnis, dass es wirklich schwer ist, solch komplizierte Features mit den Leuten zu bauen, weißt du?  Ja.

52:49 - Jonas Diezun (beam.ai)
  Weißt du, also wir brauchen eigentlich nochmal so einen krassen Product Wizard, aber so was, der nochmal da so rumturnen und solche Sachen macht.  Meiner Meinung nach haben wir ein Problem.

53:01 - Dorian Schlede (beam.ai)
  Produkt, weil das Feature Scoping ist viel zu high level. Ja, also es ist viel zu high level. Jetzt hat Bene für den, also gut, ich verstehe jetzt, dass Bene jetzt sagt, okay, wir machen jetzt Feature Teams, geben die Verantwortung ab, ja, aber das ist viel zu viel.  Also die ganzen Feature Beschreibungen sind viel zu high level, da sind die ganzen Edge Cases nicht durchgedacht, ja, da gibt es noch viel, viel mehr, was man durchdenken sollte aus einer Produktsicht und wir versuchen das an die Developer auszulagern und das hat auch sehr viel zu Frustrationen geführt, weil dann schlägt Bene was vor, dann bauen die das und dann mittendrin sagen wir, warte mal, wir wollen doch noch was anderes und dann müssen die wieder was, während sie das Feature entwickeln, ändern, anstatt dass man das in der Konzeptphase sauber durchdacht hat, ja.  Also meiner Meinung nach haben wir da schon auch ein signifikantes Problem.

53:50 - Jonas Diezun (beam.ai)
  Ja, ich verstehe, was du meinst. Ich sehe das jetzt auch so ein bisschen bei der Roadmap, die da jetzt kommt, also so ein paar Sachen sind jetzt sehr klar zu tun, aber weiter hinten, hast du recht, es wird komplizierter.  Ja.

54:01 - Dorian Schlede (beam.ai)
  Ja. Ja. Und Agent Learning, jetzt habe ich irgendein Ding gemacht, jetzt hat Bene das irgendwie gevibe-coded, hat gesagt, hier ist es, ja, bitte.  Aber es ist überhaupt nicht durchdacht, also da fehlt noch alles gefühlt an dem Feature. Und jetzt sollen die Devs das bauen und jetzt haben die irgendwas gebaut und das ergibt aber gar keinen Sinn.

54:21 - Jonas Diezun (beam.ai)
  Keine Ahnung. Also, ich weiß, was du meinst. Ich habe jetzt einfach gesagt, Bene, bring diese Scheiße in dieses Produkt rein, ist mir scheißegal, wie Hauptsache das ist da drin.  Und dann iterieren wir.

54:34 - Dorian Schlede (beam.ai)
  Ja.

54:36 - Jonas Diezun (beam.ai)
  Also, da komme ich auch von der anderen Seite und schiebe die Sachen einfach rein, aber ich verstehe trotzdem, was du meinst.  Ich glaube, ein paar Sachen müssen wir da besser diskutieren. ist halt immer ein, ich glaube, baue halt dein System dafür.

54:49 - Dorian Schlede (beam.ai)
  Mir zu helfen, das zu konzeptionieren.

54:51 - Jonas Diezun (beam.ai)
  Ja, oder mit Sarkip und so. Ich glaube, Sarkip sollst du das auch beibringen, weil der hat jetzt auch langsam Bock.

54:58 - Dorian Schlede (beam.ai)
  Ja. Wir machen das. Ich... Ich werde die Leute beglücken. Also in meinem Team sind wir alle so unglaublich dankbar.  Das ist Wahnsinn.

55:08 - Jonas Diezun (beam.ai)
  Mit Zarkib ist es gut, weil das würde uns im Product richtig helfen.

55:14 - Dorian Schlede (beam.ai)
  Okay. Kann er sich seinen Product Management Guidance Coach zusammenbasteln, der ihm hyperintelligente Ideen für jedes Feature gibt? War nicht so schwer.

55:25 - Jonas Diezun (beam.ai)
  Muss halt nur ein bisschen rumprompten. Nee, musst du nicht mal.

55:29 - Dorian Schlede (beam.ai)
  Du musst der KI nur sagen, was du willst. Also ist ja prompten, aber ja. Bring es mal Sarkib bei.

55:37 - Jonas Diezun (beam.ai)
  Sarkib ist nämlich jetzt schon immer, gib mir jetzt Zugriff für MCP für Framer, dann kann ich das auch machen.  Geil.

55:44 - Dorian Schlede (beam.ai)
  Ja, Sarkib, der Hackathon hat auch wirklich nochmal geholfen. Also das war wirklich nochmal wirklich sehr, sehr wichtig. Ja, das war echt gut.  Und die Leute haben die Erwartung, dass wir da hinkommen, um sie zu replacen übrigens, weil die dachten jetzt, wir gehen jetzt da hin und...  um zu lernen, wie die arbeiten, um dann sozusagen die Features selber zu vibe coden. Also das war ein bisschen die Angst, als wir da hingekommen sind.  Also da war sehr viel Misstrauen. Aber am Ende der Woche waren wir alle sehr happy und befreundet und hatten sehr viel Spaß und haben sehr viel gelernt alle und ja, es war gut.  Nice.

56:21 - Jonas Diezun (beam.ai)
  Okay.

56:23 - Dorian Schlede (beam.ai)
  Juti.

56:24 - Jonas Diezun (beam.ai)
  Wir sehen uns am Montag, oder? Yes.

56:27 - Dorian Schlede (beam.ai)
  Bist du in Berlin oder bist du in München? Ich bin gerade in Berlin, ich komme Sonntag. Und dann wieder nach München und dann wieder nach Berlin, oder was?  Und dann nach Ibiza.

56:38 - Jonas Diezun (beam.ai)
  Ich bin mit Freunden nach Ibiza nächste Woche. Boah.

56:43 - Dorian Schlede (beam.ai)
  Übernächste?

56:44 - Jonas Diezun (beam.ai)
  Äh, ich muss am Donnerstag schon fliegen, leider. Ich bin leider nur teilweise bei der Week dabei. Das habe ich jetzt schon vor Ewigkeiten beruhigt.  Du Armer! Musst du nach Ibiza? Oh nein. Das war ja geil. geil.

57:01 - Dorian Schlede (beam.ai)
  Und dann langes Wochenende einfach oder machst du eine Woche Urlaub?

57:05 - Jonas Diezun (beam.ai)
  Nee, dann nur Wochenende und dann komme ich wieder, dann fliege ich wahrscheinlich nach München und dann komme ich wieder hoch.  Mein Akku ist gerade alle, deswegen fängt er jetzt an zu stocken, aber ich bin da.

57:17 - Dorian Schlede (beam.ai)
  Kommen eigentlich Brett und so die ganzen anderen auch oder kommen nur das Solutions Team Bene und Burak?

57:24 - Jonas Diezun (beam.ai)
  Äh, Quentin kommt, ähm, aber Brett kommt nicht, ne, die anderen kommen nicht. Und Bone, Karim auch nicht. Ne, ne.  Ja, okay.

57:37 - Dorian Schlede (beam.ai)
  Deine Runde. Nice. Freue ich mich. Nenne ich das erste Mal Muschleba Ken, bin ich mir gespannt.

57:45 - Jonas Diezun (beam.ai)
  Ach, echt?

57:46 - Dorian Schlede (beam.ai)
  Ja, ich habe den noch nie gesehen. Nein. Ich habe jetzt alle gesehen, außer Muschleba und Hassan, äh, live.

57:57 - Jonas Diezun (beam.ai)
  Krass. By the way, wir sind beim AXA-Hacker-Tippen. Das ist geil, wenn wir jetzt Zürich haben und dann Axel.

58:11 - Dorian Schlede (beam.ai)
  Wir müssen da hin und Agents bauen live oder was?

58:16 - Jonas Diezun (beam.ai)
  Irgendwie sowas.

58:19 - Dorian Schlede (beam.ai)
  Ja, Zürich haben wir Da bin ich mal gespannt.

58:22 - Jonas Diezun (beam.ai)
  Ja, das ist jetzt noch nicht signed, deswegen, ich bin immer. Aber wir haben von drei Stakeholdern und das ist okay.  Soll schon passen. Nein, hier geht es jetzt in Laptop langs. Bis erst wieder über 5% kommen, dann wird er schneller.  Ja, die hat auch gegebenenfalls. wenn wir jetzt Zürich haben, dann können wir da auch ein bisschen was lernen und dann machen wir Axel auch noch.  Ich glaube, dann haben wir da richtig gute Chance.

58:51 - Dorian Schlede (beam.ai)
  Ja. Ja, ein bisschen.

58:53 - Jonas Diezun (beam.ai)
  Das kommt auf jeden Fall. Firma, by the way.

58:57 - Dorian Schlede (beam.ai)
  Firma?

58:59 - Jonas Diezun (beam.ai)
  Also, das ist ein Hackathon und da ist noch ein anderer. Ich eine andere Company dabei.

59:06 - Dorian Schlede (beam.ai)
  Okay. Aber wir machen mit oder mit veranstalten?

59:12 - Jonas Diezun (beam.ai)
  Also die machen Hackathon, wir auch immer. Wahrscheinlich geben die uns ein paar Sachen, die wir dann bauen müssen und dann entscheiden sie mit wem sie das implementieren.  Einzelkampf, ja, eins gegen eins. So ist das, aber wenn wir uns da durchsetzen, dann sind das 10 Millionen Revenue, die irgendwann kommen werden, weißt du?

59:41 - Dorian Schlede (beam.ai)
  Ja, wir müssen jetzt unsere Delivery finalisieren. Jetzt haben wir so viel gelernt über die letzten anderthalb Jahre, jetzt sind wir kurz davor, alles zusammenzufüllen.  Ja.

59:54 - Jonas Diezun (beam.ai)
  Und dann kannst du beim Hackathon einfach das da reinhacken und dann baut sich die ganze Scheiße selbst und am Ende des Hackathon hast du einfach 100 Agents gebaut.  Und Dann sagen alle, okay, Walla, Bruder, hier ist der Vertrag.

1:00:08 - Dorian Schlede (beam.ai)
  Ich glaube, es wird ein Window of Opportunity geben, wo das geht, dieser Effekt. Mal gucken, jetzt kommen gute Zeiten.  Dann, Jonas, ich werde jetzt noch ein bisschen weitermachen. Wahrscheinlich, ja.

1:00:25 - Jonas Diezun (beam.ai)
  Ich hoffe, der ist ein bisschen länger. Wahrscheinlich nicht zu lange.

1:00:31 - Dorian Schlede (beam.ai)
  Was jetzt? wow, das eine übelste Verzögerung. ich auch.

1:00:34 - Jonas Diezun (beam.ai)
  Mein Lieber, wir sehen uns am Montag. Okay, hau rein.

1:00:38 - Dorian Schlede (beam.ai)
  Ciao. Ja, jetzt gerade. Wir sehen beim nächsten Mal. Untertitelung
   