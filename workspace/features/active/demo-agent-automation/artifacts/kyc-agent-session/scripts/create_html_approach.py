#!/usr/bin/env python3
"""
Create HTML documents that can be printed as PDF - following user's working approach
"""

import base64
import os
import json

def create_html_document(title, content_lines, filename):
    """Create an HTML document that can be printed as PDF"""
    html_content = f"""<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>{title}</title>
    <style>
        @page {{
            margin: 1in;
            size: A4;
        }}
        body {{ 
            font-family: Arial, sans-serif; 
            margin: 0;
            padding: 20px;
            line-height: 1.6;
            color: #333;
        }}
        .header {{ 
            text-align: center; 
            margin-bottom: 30px; 
            border-bottom: 3px solid #0066cc;
            padding-bottom: 20px;
        }}
        .header h1 {{
            margin: 0;
            color: #0066cc;
            font-size: 24px;
        }}
        .content {{ 
            margin: 20px 0; 
        }}
        .line {{ 
            margin: 10px 0; 
            padding: 5px 0;
            font-size: 14px;
        }}
        .amount {{ 
            font-size: 18px; 
            font-weight: bold; 
            color: #cc0000; 
        }}
        .balance {{ 
            font-size: 18px; 
            font-weight: bold; 
            color: #006600; 
        }}
        .label {{
            font-weight: bold;
            display: inline-block;
            width: 150px;
        }}
        .footer {{
            margin-top: 40px;
            font-size: 12px;
            color: #666;
            border-top: 1px solid #ccc;
            padding-top: 20px;
        }}
    </style>
</head>
<body>
    <div class="header">
        <h1>{title}</h1>
    </div>
    
    <div class="content">
"""
    
    for line in content_lines:
        if line.startswith("Amount Due:"):
            html_content += f'        <div class="line"><span class="label">Amount Due:</span> <span class="amount">$125.50</span></div>\n'
        elif "Balance:" in line and ("Current" in line or "Available" in line):
            html_content += f'        <div class="line"><span class="label">{line.split(":")[0]}:</span> <span class="balance">{line.split(":")[1].strip()}</span></div>\n'
        elif line.startswith("Account Number:") or line.startswith("Service Address:") or line.startswith("Billing Date:") or line.startswith("Due Date:") or line.startswith("Customer:") or line.startswith("Account Holder:") or line.startswith("Statement Date:") or line.startswith("Account Type:") or line.startswith("Name:") or line.startswith("DOB:") or line.startswith("Address:") or line.startswith("City:") or line.startswith("License #:") or line.startswith("Expires:"):
            parts = line.split(":", 1)
            if len(parts) == 2:
                html_content += f'        <div class="line"><span class="label">{parts[0]}:</span> {parts[1].strip()}</div>\n'
            else:
                html_content += f'        <div class="line">{line}</div>\n'
        elif line == "":
            html_content += '        <div class="line"><br></div>\n'
        else:
            html_content += f'        <div class="line">{line}</div>\n'
    
    html_content += """    </div>
    
    <div class="footer">
        <p>Generated by Beam KYC Agent</p>
    </div>
</body>
</html>"""
    
    with open(filename, 'w', encoding='utf-8') as f:
        f.write(html_content)
    
    return filename

def create_utility_bill_html():
    """Create utility bill HTML"""
    content = [
        "Account Number: 1234567890",
        "Service Address: 123 MAIN ST, AUSTIN, TX 78701",
        "Billing Date: September 1, 2024",
        "Due Date: September 30, 2024",
        "Customer: John Smith",
        "",
        "Amount Due: $125.50",
        "",
        "Thank you for choosing Austin Energy",
        "For questions, call 512-494-9400"
    ]
    return create_html_document("AUSTIN ENERGY UTILITY BILL", content, "utility_bill_printable.html")

def create_bank_statement_html():
    """Create bank statement HTML"""
    content = [
        "Account Holder: John Smith",
        "Account Number: ****1234",
        "Statement Date: August 31, 2024",
        "Account Type: Checking",
        "",
        "Current Balance: $5,250.00",
        "Available Balance: $5,250.00",
        "",
        "This statement covers the period from August 1, 2024 to August 31, 2024",
        "For questions, call 1-800-935-9935"
    ]
    return create_html_document("CHASE BANK STATEMENT", content, "bank_statement_printable.html")

def create_drivers_license_html():
    """Create driver's license HTML"""
    content = [
        "Name: SMITH, JOHN",
        "DOB: 03/15/1985",
        "Address: 123 MAIN ST",
        "City: AUSTIN, TX 78701",
        "License #: 12345678",
        "Expires: 03/15/2030",
        "",
        "Photo: [PLACEHOLDER]"
    ]
    return create_html_document("TEXAS DRIVER LICENSE", content, "drivers_license_printable.html")

def encode_html_to_base64(html_path):
    """Encode an HTML file to base64 string"""
    try:
        if not os.path.exists(html_path):
            raise FileNotFoundError(f"HTML file not found: {html_path}")
        
        # Read HTML in binary mode
        with open(html_path, 'rb') as html_file:
            html_bytes = html_file.read()
            # Encode to base64
            encoded = base64.b64encode(html_bytes)
            # Convert bytes to string
            return encoded.decode('utf-8')
    except Exception as e:
        print(f"Error encoding HTML {html_path}: {e}")
        return None

def create_html_kyc_payload():
    """Create KYC payload with HTML documents (printable as PDF)"""
    
    # Create HTML documents
    print("Creating printable HTML documents...")
    utility_html = create_utility_bill_html()
    bank_html = create_bank_statement_html()
    license_html = create_drivers_license_html()
    
    # Encode HTMLs to base64
    print("Encoding HTMLs to base64...")
    utility_b64 = encode_html_to_base64(utility_html)
    bank_b64 = encode_html_to_base64(bank_html)
    license_b64 = encode_html_to_base64(license_html)
    
    if not all([utility_b64, bank_b64, license_b64]):
        print("Error: Failed to encode one or more HTML files")
        return None
    
    # Get file sizes
    utility_size = os.path.getsize(utility_html)
    bank_size = os.path.getsize(bank_html)
    license_size = os.path.getsize(license_html)
    
    # Create payload with HTML MIME type
    payload = {
        "taskQuery": {
            "query": "Process KYC documents for customer John Smith with driver's license, utility bill, and bank statement. Validate documents, verify identity, assess risk, and make compliance decision.",
            "additionalInfo": "Customer: John Smith, DOB: 1985-03-15, Address: 123 Main Street, Austin, TX 78701, Occupation: Software Engineer, Income: $75,000-$100,000"
        },
        "parsingUrls": [],
        "encodedContextFiles": [
            {
                "data": f"data:text/html;base64,{license_b64}",
                "mimeType": "text/html",
                "fileName": "drivers_license.html",
                "fileSize": str(license_size)
            },
            {
                "data": f"data:text/html;base64,{utility_b64}",
                "mimeType": "text/html",
                "fileName": "utility_bill.html",
                "fileSize": str(utility_size)
            },
            {
                "data": f"data:text/html;base64,{bank_b64}",
                "mimeType": "text/html",
                "fileName": "bank_statement.html",
                "fileSize": str(bank_size)
            }
        ],
        "agentId": "d8b2e9b5-20da-4e69-81cf-5af2933124c9"
    }
    
    return payload

def main():
    """Main function"""
    print("Creating printable HTML documents for KYC agent...")
    
    # Create payload
    payload = create_html_kyc_payload()
    
    if payload:
        # Save payload
        with open('html_printable_kyc_payload.json', 'w') as f:
            json.dump(payload, f, indent=2)
        
        print("‚úÖ Successfully created:")
        print("  - utility_bill_printable.html")
        print("  - bank_statement_printable.html") 
        print("  - drivers_license_printable.html")
        print("  - html_printable_kyc_payload.json")
        
        # Show encoding info
        print(f"\nüìä Encoding Information:")
        for file_info in payload['encodedContextFiles']:
            filename = file_info['fileName']
            file_size = file_info['fileSize']
            encoded_size = len(file_info['data'])
            print(f"  - {filename}: {file_size} bytes ‚Üí {encoded_size} chars base64")
            
        print(f"\nüí° Instructions:")
        print("  - Open the HTML files in a web browser")
        print("  - Use 'Print' ‚Üí 'Save as PDF' to create proper PDFs")
        print("  - The HTML files are designed to print well as PDFs")
    else:
        print("‚ùå Failed to create payload")

if __name__ == "__main__":
    main()
